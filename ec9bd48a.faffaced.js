(window.webpackJsonp=window.webpackJsonp||[]).push([[759],{829:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(7),i=(n(0),n(893)),a=(n(897),n(898),{id:"test-runner-configuration",title:"Configuration"}),l={unversionedId:"test-runner-configuration",id:"test-runner-configuration",isDocsHomePage:!1,title:"Configuration",description:"- Modify options",source:"@site/docs/test-runner-configuration.mdx",slug:"/test-runner-configuration",permalink:"/docs/next/test-runner-configuration",version:"current",sidebar:"docs",previous:{title:"Playwright Tests",permalink:"/docs/next/test-runner-intro"},next:{title:"Examples",permalink:"/docs/next/test-runner-examples"}},s=[{value:"Modify options",id:"modify-options",children:[{value:"Globally in the configuration file",id:"globally-in-the-configuration-file",children:[]},{value:"Locally in the test file",id:"locally-in-the-test-file",children:[]},{value:"Available options",id:"available-options",children:[]}]},{value:"Skip tests with annotations",id:"skip-tests-with-annotations",children:[]},{value:"Run tests in parallel",id:"run-tests-in-parallel",children:[]},{value:"Reporters",id:"reporters",children:[{value:"Export JUnit or JSON report",id:"export-junit-or-json-report",children:[]}]}],c={toc:s};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"#modify-options"}),"Modify options")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"#skip-tests-with-annotations"}),"Skip tests with annotations")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"#run-tests-in-parallel"}),"Run tests in parallel")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"#reporters"}),"Reporters"))),Object(i.b)("h2",{id:"modify-options"},"Modify options"),Object(i.b)("p",null,"You can modify browser launch options, context creation options and testing options either globally in the configuration file, or locally in the test file."),Object(i.b)("p",null,"Playwright test runner is based on the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/microsoft/folio"}),"Folio")," framework, so it supports any configuration available in Folio, and adds a lot of Playwright-specific options."),Object(i.b)("h3",{id:"globally-in-the-configuration-file"},"Globally in the configuration file"),Object(i.b)("p",null,"You can specify different options for each browser using projects in the configuration file. Below is an example that changes some global testing options, and Chromium browser configuration."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"// config.ts\nimport { PlaywrightTestConfig } from \"@playwright/test\";\n\nconst config: PlaywrightTestConfig = {\n  // Each test is given 90 seconds.\n  timeout: 90000,\n  // Failing tests will be retried at most two times.\n  retries: 2,\n  projects: [\n    {\n      name: 'chromium',\n      use: {\n        browserName: 'chromium',\n\n        // Launch options\n        headless: false,\n        slowMo: 50,\n\n        // Context options\n        viewport: { width: 800, height: 600 },\n        ignoreHTTPSErrors: true,\n\n        // Testing options\n        video: 'retain-on-failure',\n      },\n    },\n  ],\n};\nexport default config;\n")),Object(i.b)("h3",{id:"locally-in-the-test-file"},"Locally in the test file"),Object(i.b)("p",null,"With ",Object(i.b)("inlineCode",{parentName:"p"},"test.use()")," you can override some options for a file, or a ",Object(i.b)("inlineCode",{parentName:"p"},"describe")," block."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"// my.spec.ts\nimport { test, expect } from \"@playwright/test\";\n\n// Run tests in this file with portrait-like viewport.\ntest.use({ viewport: { width: 600, height: 900 } });\n\ntest('my test', async ({ page }) => {\n  // Test code goes here.\n});\n")),Object(i.b)("h3",{id:"available-options"},"Available options"),Object(i.b)("p",null,"See the full list of launch options in ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://playwright.dev/docs/api/class-browsertype#browsertypelaunchoptions"}),Object(i.b)("inlineCode",{parentName:"a"},"browserType.launch()"))," documentation."),Object(i.b)("p",null,"See the full list of context options in ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://playwright.dev/docs/api/class-browser#browsernewcontextoptions"}),Object(i.b)("inlineCode",{parentName:"a"},"browser.newContext()"))," documentation."),Object(i.b)("p",null,"Available testing options:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"screenshot: 'off' | 'on' | 'only-on-failure'")," - Whether to capture a screenshot after each test, off by default.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"off")," - Do not capture screenshots."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"on")," - Capture screenshot after each test."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"only-on-failure")," - Capture screenshot after each test failure."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"video: 'off' | 'on' | 'retain-on-failure' | 'retry-with-video'")," - Whether to record video for each test, off by default.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"off")," - Do not record video."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"on")," - Record video for each test."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"retain-on-failure"),"  - Record video for each test, but remove all videos from successful test runs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"retry-with-video")," - Record video only when retrying a test.")))),Object(i.b)("p",null,"Most notable testing options from ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/microsoft/folio"}),"Folio documentation"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reporter: 'dot' | 'line' | 'list'")," - Choose a reporter: minimalist ",Object(i.b)("inlineCode",{parentName:"li"},"dot"),", concise ",Object(i.b)("inlineCode",{parentName:"li"},"line")," or detailed ",Object(i.b)("inlineCode",{parentName:"li"},"list"),". See ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/microsoft/folio#reporters"}),"Folio reporters")," for more details."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"retries: number")," - Each failing test will be retried up to the certain number of times."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"testDir: string")," - Directory where test runner should search for test files."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"timeout: number")," - Timeout in milliseconds for each test."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"workers: number")," - The maximum number of worker processes to run in parallel.")),Object(i.b)("h2",{id:"skip-tests-with-annotations"},"Skip tests with annotations"),Object(i.b)("p",null,"The Playwright test runner can annotate tests to skip under certain parameters. This is enabled by ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/microsoft/folio#annotations"}),"Folio annotations"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'test("should be skipped on firefox", async ({ page, browserName }) => {\n  test.skip(browserName === "firefox", "optional description for the skip");\n  // Test function\n});\n')),Object(i.b)("h2",{id:"run-tests-in-parallel"},"Run tests in parallel"),Object(i.b)("p",null,"Tests are run in parallel by default, using multiple worker processes. You can control the parallelism with the ",Object(i.b)("inlineCode",{parentName:"p"},"workers")," option in the configuration file or from the command line."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"# Run just a single test at a time - no parallelization\nnpx folio --workers=1\n\n# Run up to 10 tests in parallel\nnpx folio --workers=10\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'// config.ts\nimport { PlaywrightTestConfig } from "@playwright/test";\n\nconst config: PlaywrightTestConfig = {\n  // No parallelization on CI, default value locally.\n  worker: process.env.CI ? 1 : undefined,\n  projects: [\n    // Your projects go here\n  ],\n};\nexport default config;\n')),Object(i.b)("p",null,"By default, test runner chooses the number of workers based on available CPUs."),Object(i.b)("h2",{id:"reporters"},"Reporters"),Object(i.b)("p",null,"Playwright test runner comes with a few built-in reporters for different needs and ability to provide custom reporters. The easiest way to try out built-in reporters is to pass ",Object(i.b)("inlineCode",{parentName:"p"},"--reporter")," ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"#command-line"}),"command line option"),". Built-in terminal reporters are minimalist ",Object(i.b)("inlineCode",{parentName:"p"},"dot"),", concise ",Object(i.b)("inlineCode",{parentName:"p"},"line")," and detailed ",Object(i.b)("inlineCode",{parentName:"p"},"list"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"npx folio --reporter=line\nnpx folio --reporter=dot\nnpx folio --reporter=list\n")),Object(i.b)("p",null,"Alternatively, you can specify the reporter in the configuration file."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"// config.ts\nimport { PlaywrightTestConfig } from \"@playwright/test\";\n\nconst config: PlaywrightTestConfig = {\n  // Concise 'dot' on CI, more interactive 'list' when running locally\n  reporter: process.env.CI ? 'dot' : 'line',\n  projects: [\n    // Your projects go here\n  ],\n};\nexport default config;\n")),Object(i.b)("h3",{id:"export-junit-or-json-report"},"Export JUnit or JSON report"),Object(i.b)("p",null,"The Playwright test runner includes reporters that produce a JUnit compatible XML file or a JSON file with test results."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"// config.ts\nimport { PlaywrightTestConfig } from \"@playwright/test\";\n\nconst config: PlaywrightTestConfig = {\n  reporter: [\n    // Live output to the terminal\n    'list',\n    // JUnit compatible xml report\n    { name: 'junit', outputFile: 'report.xml' },\n    // JSON file with test results\n    { name: 'json', outputFile: 'report.json' },\n  ]\n  projects: [\n    // Your projects go here\n  ],\n};\nexport default config;\n")))}p.isMDXComponent=!0},893:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),p=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),f=r,m=b["".concat(a,".").concat(f)]||b[f]||u[f]||i;return n?o.a.createElement(m,l(l({ref:t},c),{},{components:n})):o.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},894:function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},895:function(e,t,n){"use strict";var r=n(0),o=n(896);t.a=function(){var e=Object(r.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},896:function(e,t,n){"use strict";var r=n(0),o=Object(r.createContext)(void 0);t.a=o},897:function(e,t,n){"use strict";n(0),n(895),n(894),n(55)},898:function(e,t,n){"use strict";n(3),n(0)}}]);