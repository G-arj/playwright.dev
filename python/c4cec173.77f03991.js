(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{290:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),i=(n(0),n(347)),o=(n(350),n(351),{id:"test-advanced",title:"Advanced Configuration"}),c={unversionedId:"test-advanced",id:"test-advanced",isDocsHomePage:!1,title:"Advanced Configuration",description:"- Projects",source:"@site/docs/test-advanced.mdx",slug:"/test-advanced",permalink:"/python/docs/next/test-advanced",version:"current"},l=[{value:"Projects",id:"projects",children:[]},{value:"workerInfo object",id:"workerinfo-object",children:[]},{value:"testInfo object",id:"testinfo-object",children:[]},{value:"Global setup and teardown",id:"global-setup-and-teardown",children:[]},{value:"Fixture options",id:"fixture-options",children:[{value:"Add custom matchers using expect.extend",id:"add-custom-matchers-using-expectextend",children:[]}]}],s={toc:l};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#projects"}),"Projects")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#workerinfo-object"}),"workerInfo object")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#testinfo-object"}),"testInfo object")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#global-setup-and-teardown"}),"Global setup and teardown")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#fixture-options"}),"Fixture options"))),Object(i.b)("br",null),Object(i.b)("h2",{id:"projects"},"Projects"),Object(i.b)("p",null,"Playwright Test supports running multiple test projects at the same time. This is useful for running the same tests in multiple configurations. For example, consider running tests against multiple versions of the database."),Object(i.b)("p",null,'To make use of this feature, we will declare an "option fixture" for the database version, and use it in the tests.'),Object(i.b)("p",null,"We can use our fixtures in the test."),Object(i.b)("p",null,"Now, we can run test in multiple configurations by using projects."),Object(i.b)("p",null,"Each project can be configured separately, and run different set of tests with different parameters. Supported options are ",Object(i.b)("inlineCode",{parentName:"p"},"name"),", ",Object(i.b)("inlineCode",{parentName:"p"},"outputDir"),", ",Object(i.b)("inlineCode",{parentName:"p"},"repeatEach"),", ",Object(i.b)("inlineCode",{parentName:"p"},"retries"),", ",Object(i.b)("inlineCode",{parentName:"p"},"snapshotDir"),", ",Object(i.b)("inlineCode",{parentName:"p"},"testDir"),", ",Object(i.b)("inlineCode",{parentName:"p"},"testIgnore"),", ",Object(i.b)("inlineCode",{parentName:"p"},"testMatch")," and ",Object(i.b)("inlineCode",{parentName:"p"},"timeout"),". See ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#configuration-object"}),"configuration object")," for detailed description."),Object(i.b)("p",null,"You can run all projects or just a single one:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"# Run both projects - each test will be run twice\nnpx playwright test\n\n# Run a single project - each test will be run once\nnpx playwright test --project=v2\n")),Object(i.b)("h2",{id:"workerinfo-object"},"workerInfo object"),Object(i.b)("p",null,"Depending on the configuration and failures, Playwright Test might use different number of worker processes to run all the tests. For example, Playwright Test will always start a new worker process after a failing test."),Object(i.b)("p",null,"Worker-scoped fixtures and ",Object(i.b)("inlineCode",{parentName:"p"},"beforeAll")," and ",Object(i.b)("inlineCode",{parentName:"p"},"afterAll")," hooks receive ",Object(i.b)("inlineCode",{parentName:"p"},"workerInfo")," parameter. The following information is accessible from the ",Object(i.b)("inlineCode",{parentName:"p"},"workerInfo"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"config")," - ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#configuration-object"}),"Configuration object"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"project")," - Specific ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#projects"}),"project")," configuration for this worker. Different projects are always run in separate processes."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"workerIndex: number")," - A unique sequential index assigned to the worker process.")),Object(i.b)("p",null,"Consider an example where we run a new http server per worker process, and use ",Object(i.b)("inlineCode",{parentName:"p"},"workerIndex")," to produce a unique port number:"),Object(i.b)("h2",{id:"testinfo-object"},"testInfo object"),Object(i.b)("p",null,"Test fixtures and ",Object(i.b)("inlineCode",{parentName:"p"},"beforeEach")," and ",Object(i.b)("inlineCode",{parentName:"p"},"afterEach")," hooks receive ",Object(i.b)("inlineCode",{parentName:"p"},"testInfo")," parameter. It is also available to the test function as a second parameter."),Object(i.b)("p",null,"In addition to everything from the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#workerinfo"}),Object(i.b)("inlineCode",{parentName:"a"},"workerInfo")),", the following information is accessible before and during the test:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"title: string")," - Test title."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"file: string")," - Full path to the test file."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"line: number")," - Line number of the test declaration."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"column: number")," - Column number of the test declaration."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fn: Function")," - Test body function."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"repeatEachIndex: number")," - The sequential repeat index."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"retry: number")," - The sequential number of the test retry (zero means first run)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"expectedStatus: 'passed' | 'failed' | 'timedOut'")," - Whether this test is expected to pass, fail or timeout."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"timeout: number")," - Test timeout."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"annotations")," - ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#annotations"}),"Annotations")," that were added to the test."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"snapshotPathSegment: string")," - Relative path, used to locate snapshots for the test."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"snapshotPath(...pathSegments: string[])")," - Function that returns the full path to a particular snapshot for the test."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"outputDir: string")," - Absolute path to the output directory for this test run."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"outputPath(...pathSegments: string[])")," - Function that returns the full path to a particular output artifact for the test.")),Object(i.b)("p",null,"The following information is accessible after the test body has finished, in fixture teardown:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"duration: number")," - test running time in milliseconds."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"status: 'passed' | 'failed' | 'timedOut'")," - the actual test result."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"error")," - any error thrown by the test body."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"stdout: (string | Buffer)[]")," - array of stdout chunks collected during the test run."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"stderr: (string | Buffer)[]")," - array of stderr chunks collected during the test run.")),Object(i.b)("p",null,"Here is an example test that saves some information:"),Object(i.b)("p",null,"Here is an example fixture that automatically saves debug logs when the test fails:"),Object(i.b)("h2",{id:"global-setup-and-teardown"},"Global setup and teardown"),Object(i.b)("p",null,"To set something up once before running all tests, use ",Object(i.b)("inlineCode",{parentName:"p"},"globalSetup")," option in the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#writing-a-configuration-file"}),"configuration file"),". Similarly, use ",Object(i.b)("inlineCode",{parentName:"p"},"globalTeardown")," to run something once after all the tests."),Object(i.b)("h2",{id:"fixture-options"},"Fixture options"),Object(i.b)("p",null,"It is common for the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#fixtures"}),"fixtures"),' to be configurable, based on various test needs. Playwright Test allows creating "options" fixture for this purpose.'),Object(i.b)("p",null,"We can now pass the option value with ",Object(i.b)("inlineCode",{parentName:"p"},"test.use()"),"."),Object(i.b)("p",null,"In addition to ",Object(i.b)("inlineCode",{parentName:"p"},"test.use()"),", we can also specify options in the configuration file."),Object(i.b)("h3",{id:"add-custom-matchers-using-expectextend"},"Add custom matchers using expect.extend"),Object(i.b)("p",null,"Playwright Test uses ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://jestjs.io/docs/expect"}),"expect")," under the hood which has the functionality to extend it with ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://jestjs.io/docs/expect#expectextendmatchers"}),"custom matchers"),". See the following example where a custom ",Object(i.b)("inlineCode",{parentName:"p"},"toBeWithinRange")," function gets added."),Object(i.b)("p",null,"To import expect matching libraries like ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/jest-community/jest-extended#installation"}),"jest-extended")," you can import it from your ",Object(i.b)("inlineCode",{parentName:"p"},"globals.d.ts"),":"))}b.isMDXComponent=!0},346:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},347:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,f=u["".concat(o,".").concat(d)]||u[d]||p[d]||i;return n?r.a.createElement(f,c(c({ref:t},s),{},{components:n})):r.a.createElement(f,c({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},348:function(e,t,n){"use strict";var a=n(0),r=n(349);t.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},349:function(e,t,n){"use strict";var a=n(0),r=Object(a.createContext)(void 0);t.a=r},350:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(348),o=n(346),c=n(53),l=n.n(c),s=37,b=39;t.a=function(e){var t=e.lazy,n=e.block,c=e.defaultValue,u=e.values,p=e.groupId,d=e.className,f=Object(i.a)(),m=f.tabGroupChoices,j=f.setTabGroupChoices,O=Object(a.useState)(c),h=O[0],g=O[1],N=a.Children.toArray(e.children);if(null!=p){var w=m[p];null!=w&&w!==h&&u.some((function(e){return e.value===w}))&&g(w)}var v=function(e){g(e),null!=p&&j(p,e)},y=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":n},d)},u.map((function(e){var t=e.value,n=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===t,className:Object(o.a)("tabs__item",l.a.tabItem,{"tabs__item--active":h===t}),key:t,ref:function(e){return y.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case b:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case s:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(y,e.target,e)},onFocus:function(){return v(t)},onClick:function(){v(t)}},n)}))),t?Object(a.cloneElement)(N.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},N.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==h})}))))}},351:function(e,t,n){"use strict";var a=n(3),r=n(0),i=n.n(r);t.a=function(e){var t=e.children,n=e.hidden,r=e.className;return i.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:r}),t)}}}]);