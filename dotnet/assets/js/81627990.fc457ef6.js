"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[3161],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,g=d["".concat(l,".").concat(h)]||d[h]||c[h]||s;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<s;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:function(e,t,n){n(7294)},5064:function(e,t,n){n(7294),n(9443)},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},9861:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return u},default:function(){return c}});var a=n(2122),r=n(9756),s=(n(7294),n(3905)),i=(n(5064),n(8215),{id:"test-runners",title:"Test Runners"}),o=void 0,l={unversionedId:"test-runners",id:"version-1.14.0/test-runners",isDocsHomePage:!1,title:"Test Runners",description:"While Playwright for .NET isn't tied to a particular test runner or testing framework, in our experience it works best with the built-in .NET test runner, and using NUnit as the test framework. NUnit is also what we use internally for our tests.",source:"@site/versioned_docs/version-1.14.0/test-runners.mdx",sourceDirName:".",slug:"/test-runners",permalink:"/dotnet/docs/test-runners",version:"1.14.0",frontMatter:{id:"test-runners",title:"Test Runners"},sidebar:"version-1.14.0/docs",previous:{title:"Release notes",permalink:"/dotnet/docs/release-notes"},next:{title:"Auto-waiting",permalink:"/dotnet/docs/actionability"}},u=[{value:"Creating an NUnit project",id:"creating-an-nunit-project",children:[]},{value:"Running NUnit tests in Parallel",id:"running-nunit-tests-in-parallel",children:[]},{value:"Using Verbose API Logs with NUnit",id:"using-verbose-api-logs-with-nunit",children:[]},{value:"Using the .runsettings file",id:"using-the-runsettings-file",children:[]},{value:"Base NUnit classes for Playwright",id:"base-nunit-classes-for-playwright",children:[]},{value:"xUnit support",id:"xunit-support",children:[]}],p={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"While Playwright for .NET isn't tied to a particular test runner or testing framework, in our experience it works best with the built-in .NET test runner, and using NUnit as the test framework. NUnit is also what we use internally for ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/microsoft/playwright-dotnet/tree/main/src/Playwright.Tests"},"our tests"),"."),(0,s.kt)("p",null,"Playwright and Browser instances can be reused between tests for better performance. We recommend running each test case in a new BrowserContext, this way browser state will be isolated between the tests."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#creating-an-nunit-project"},"Creating an NUnit project")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#running-nunit-tests-in-parallel"},"Running NUnit tests in Parallel")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#using-verbose-api-logs-with-nunit"},"Using Verbose API Logs with NUnit")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#using-the-runsettings-file"},"Using the .runsettings file")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#base-nunit-classes-for-playwright"},"Base NUnit classes for Playwright")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#xunit-support"},"xUnit support"))),(0,s.kt)("h2",{id:"creating-an-nunit-project"},"Creating an NUnit project"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Create a new project\ndotnet new nunit -n PlaywrightTests\ncd PlaywrightTests\n# Add the required reference\ndotnet add package Microsoft.Playwright.NUnit\ndotnet build\n# Install the required pre-requisites\nplaywright install\n")),(0,s.kt)("p",null,"Create a PageTests.cs file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests\n{\n    [Parallelizable(ParallelScope.Self)]\n    public class MyTest : PageTest\n    {\n        [Test]\n        public async Task ShouldAdd()\n        {\n            int result = await Page.EvaluateAsync<int>("() => 7 + 3");\n            Assert.AreEqual(10, result);\n        }\n\n        [Test]\n        public async Task ShouldMultiply()\n        {\n            int result = await Page.EvaluateAsync<int>("() => 7 * 3");\n            Assert.AreEqual(21, result);\n        }\n    }\n}\n')),(0,s.kt)("p",null,"Run your tests against Chromium"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet test\n")),(0,s.kt)("p",null,"Run your tests against WebKit"),(0,s.kt)("p",null,"Windows"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"set BROWSER=webkit\ndotnet test\n")),(0,s.kt)("p",null,"Linux & Mac"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"BROWSER=webkit dotnet test\n")),(0,s.kt)("p",null,"Run your tests with GUI"),(0,s.kt)("p",null,"Window"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"set HEADED=1\ndotnet test\n")),(0,s.kt)("p",null,"Linux & Mac"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"HEADED=1 dotnet test\n")),(0,s.kt)("p",null,"You can also choose specifically which tests to run, using the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=nunit"},"filtering capabilities"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'dotnet test --filter "Name~ShouldAdd"\n')),(0,s.kt)("h2",{id:"running-nunit-tests-in-parallel"},"Running NUnit tests in Parallel"),(0,s.kt)("p",null,"By default NUnit will run all test files in parallel, while running tests inside each file sequentially. It will create as many processes as there are cores on the host system. You can adjust this behavior using the NUnit.NumberOfTestWorkers parameter."),(0,s.kt)("p",null,"For CPU-bound tests, we recommend using as many workers as there are cores on your system, divided by 2. For IO-bound tests you can use as many workers as you have cores."),(0,s.kt)("h2",{id:"using-verbose-api-logs-with-nunit"},"Using Verbose API Logs with NUnit"),(0,s.kt)("p",null,"When you have enabled the ",(0,s.kt)("a",{parentName:"p",href:"/dotnet/docs/debug#verbose-api-logs"},"verbose API log"),", via the ",(0,s.kt)("inlineCode",{parentName:"p"},"DEBUG")," environment variable, you will see the messages in the standard error stream. In NUnit, within Visual Studio, that will be the ",(0,s.kt)("inlineCode",{parentName:"p"},"Tests")," pane of the ",(0,s.kt)("inlineCode",{parentName:"p"},"Output")," window. It will also be displayed in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Test Log")," for each test."),(0,s.kt)("h2",{id:"using-the-runsettings-file"},"Using the .runsettings file"),(0,s.kt)("p",null,"When running tests from Visual Studio, you can take advantage of the ",(0,s.kt)("inlineCode",{parentName:"p"},".runsettings")," file."),(0,s.kt)("p",null,"For example, to specify the amount of workers (",(0,s.kt)("inlineCode",{parentName:"p"},"NUnit.NumberOfTestWorkers"),"), you can use the following snippet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  <NUnit>\n    <NumberOfTestWorkers>24</NumberOfTestWorkers>\n  </NUnit>\n</RunSettings>\n')),(0,s.kt)("p",null,"If you want to enable debugging, you can set the ",(0,s.kt)("inlineCode",{parentName:"p"},"DEBUG")," variable to ",(0,s.kt)("inlineCode",{parentName:"p"},"pw:api")," as documented, by doing:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n</RunSettings>\n')),(0,s.kt)("h2",{id:"base-nunit-classes-for-playwright"},"Base NUnit classes for Playwright"),(0,s.kt)("p",null,"There are few base classes available to you in Microsoft.Playwright.NUnit namespace:"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Test"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"PageTest"),(0,s.kt)("td",{parentName:"tr",align:null},"Each test gets a fresh copy of a web ",(0,s.kt)("a",{parentName:"td",href:"/dotnet/docs/api/class-page",title:"Page"},"Page")," created in its own unique ",(0,s.kt)("a",{parentName:"td",href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext"},"BrowserContext"),". Extending this class is the simplest way of writing a fully-functional Playwright test.",(0,s.kt)("br",null),(0,s.kt)("br",null),"Note: You can override the ",(0,s.kt)("inlineCode",{parentName:"td"},"ContextOptions")," method in each test file to control context options, the ones typically passed into the ",(0,s.kt)("a",{parentName:"td",href:"/dotnet/docs/api/class-browser#browser-new-context"},"Browser.NewContextAsync(options)")," method. That way you can specify all kinds of emulation options for your test file individually.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"ContextTest"),(0,s.kt)("td",{parentName:"tr",align:null},"Each test will get a fresh copy of a ",(0,s.kt)("a",{parentName:"td",href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext"},"BrowserContext"),". You can create as many pages in this context as you'd like. Using this test is the easiest way to test multi-page scenarios where you need more than one tab.",(0,s.kt)("br",null),(0,s.kt)("br",null),"Note: You can override the ",(0,s.kt)("inlineCode",{parentName:"td"},"ContextOptions")," method in each test file to control context options, the ones typically passed into the ",(0,s.kt)("a",{parentName:"td",href:"/dotnet/docs/api/class-browser#browser-new-context"},"Browser.NewContextAsync(options)")," method. That way you can specify all kinds of emulation options for your test file individually.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"BrowserTest"),(0,s.kt)("td",{parentName:"tr",align:null},"Each test will get a browser and can create as many contexts as it likes. Each test is responsible for cleaning up all the contexts it created.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"PlaywrightTest"),(0,s.kt)("td",{parentName:"tr",align:null},"This gives each test a Playwright object so that the test could start and stop as many browsers as it likes.")))),(0,s.kt)("h2",{id:"xunit-support"},"xUnit support"),(0,s.kt)("p",null,"While using xUnit is also supported, we do not support running parallel tests. This is a well known problem/design limitation outlined by the maintainers across ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/xunit/xunit/issues/2003"},"several")," ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/xunit/xunit/issues/2111#issuecomment-650004247"},"issues"),"."))}c.isMDXComponent=!0}}]);