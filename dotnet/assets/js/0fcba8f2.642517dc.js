"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[4666],{16782:function(e,t,s){s.r(t),s.d(t,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=s(87462),n=s(63366),i=(s(67294),s(3905)),o=(s(26396),s(58215),["components"]),r={id:"class-pageassertions",title:"PageAssertions"},l=void 0,p={unversionedId:"api/class-pageassertions",id:"api/class-pageassertions",isDocsHomePage:!1,title:"PageAssertions",description:"The PageAssertions] class provides assertion methods that can be used to make assertions about the [Page] state in the tests. A new instance of [PageAssertions] is created by calling [PlaywrightAssertions.Expect(page):",source:"@site/docs/api/class-pageassertions.mdx",sourceDirName:"api",slug:"/api/class-pageassertions",permalink:"/dotnet/docs/next/api/class-pageassertions",tags:[],version:"current",frontMatter:{id:"class-pageassertions",title:"PageAssertions"},sidebar:"api",previous:{title:"Page",permalink:"/dotnet/docs/next/api/class-page"},next:{title:"PlaywrightAssertions",permalink:"/dotnet/docs/next/api/class-playwrightassertions"}},c=[{value:"PageAssertions.ToHaveTitleAsync(titleOrRegExp, options)",id:"page-assertions-to-have-title",children:[],level:2},{value:"PageAssertions.ToHaveURLAsync(urlOrRegExp, options)",id:"page-assertions-to-have-url",children:[],level:2},{value:"PageAssertions.Not",id:"page-assertions-not",children:[],level:2}],g={toc:c};function u(e){var t=e.components,s=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},g,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/dotnet/docs/next/api/class-pageassertions",title:"PageAssertions"},"PageAssertions")," class provides assertion methods that can be used to make assertions about the ",(0,i.kt)("a",{parentName:"p",href:"/dotnet/docs/next/api/class-page",title:"Page"},"Page")," state in the tests. A new instance of ",(0,i.kt)("a",{parentName:"p",href:"/dotnet/docs/next/api/class-pageassertions",title:"PageAssertions"},"PageAssertions")," is created by calling ",(0,i.kt)("a",{parentName:"p",href:"/dotnet/docs/next/api/class-playwrightassertions#playwright-assertions-expect-page"},"PlaywrightAssertions.Expect(page)"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nusing static Microsoft.Playwright.Assertions;\n\nnamespace PlaywrightTests\n{\n    public class ExampleTests : PageTest\n    {\n        [Test]\n        public async Task NavigatetoLoginPage()\n        {\n            // ..\n            await Page.ClickAsync("#login");\n            await Expect(Page.Locator("div#foobar")).ToHaveURL(new Regex(".*/login"));\n        }\n    }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/dotnet/docs/next/api/class-pageassertions#page-assertions-to-have-title"},"PageAssertions.ToHaveTitleAsync(titleOrRegExp, options)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/dotnet/docs/next/api/class-pageassertions#page-assertions-to-have-url"},"PageAssertions.ToHaveURLAsync(urlOrRegExp, options)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/dotnet/docs/next/api/class-pageassertions#page-assertions-not"},"PageAssertions.Not"))),(0,i.kt)("h2",{id:"page-assertions-to-have-title"},"PageAssertions.ToHaveTitleAsync(titleOrRegExp, options)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"titleOrRegExp"),(0,i.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-title-option-title-or-reg-exp"})," ","<",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",title:"string"},"string"),"|",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex",title:"Regex"},"Regex"),">"," Expected title or RegExp.",(0,i.kt)("a",{href:"#page-assertions-to-have-title-option-title-or-reg-exp",class:"list-anchor"},"#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," ","<",(0,i.kt)("inlineCode",{parentName:"li"},"PageAssertionsToHaveTitleOptions?"),">",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Timeout"),(0,i.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-title-option-timeout"})," ","<",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/api/system.double",title:"double"},"double"),"?",">"," Time to retry the assertion for.",(0,i.kt)("a",{href:"#page-assertions-to-have-title-option-timeout",class:"list-anchor"},"#")))),(0,i.kt)("li",{parentName:"ul"},"returns:",(0,i.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-title-return"})," ","<",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/void",title:"void"},"void"),">",(0,i.kt)("a",{href:"#page-assertions-to-have-title-return",class:"list-anchor"},"#"))),(0,i.kt)("p",null,"Ensures the page has the given title."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'await Expect(page).ToHaveTitle("Playwright");\n')),(0,i.kt)("h2",{id:"page-assertions-to-have-url"},"PageAssertions.ToHaveURLAsync(urlOrRegExp, options)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"urlOrRegExp"),(0,i.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-url-option-url-or-reg-exp"})," ","<",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",title:"string"},"string"),"|",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex",title:"Regex"},"Regex"),">"," Expected substring or RegExp.",(0,i.kt)("a",{href:"#page-assertions-to-have-url-option-url-or-reg-exp",class:"list-anchor"},"#")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," ","<",(0,i.kt)("inlineCode",{parentName:"li"},"PageAssertionsToHaveURLOptions?"),">",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Timeout"),(0,i.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-url-option-timeout"})," ","<",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/api/system.double",title:"double"},"double"),"?",">"," Time to retry the assertion for.",(0,i.kt)("a",{href:"#page-assertions-to-have-url-option-timeout",class:"list-anchor"},"#")))),(0,i.kt)("li",{parentName:"ul"},"returns:",(0,i.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-url-return"})," ","<",(0,i.kt)("a",{parentName:"li",href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/void",title:"void"},"void"),">",(0,i.kt)("a",{href:"#page-assertions-to-have-url-return",class:"list-anchor"},"#"))),(0,i.kt)("p",null,"Ensures the page is navigated to the given URL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'await Expect(page).ToHaveURL(new Regex(".*checkout"));\n')),(0,i.kt)("h2",{id:"page-assertions-not"},"PageAssertions.Not"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"type: ","<",(0,i.kt)("a",{parentName:"li",href:"/dotnet/docs/next/api/class-pageassertions",title:"PageAssertions"},"PageAssertions"),">")),(0,i.kt)("p",null,"Makes the assertion check for the opposite condition. For example, this code tests that the page URL doesn't contain ",(0,i.kt)("inlineCode",{parentName:"p"},'"error"'),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'await Expect(page).Not.ToHaveURL("error");\n')))}u.isMDXComponent=!0}}]);