"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[7915],{85679:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return m},metadata:function(){return u},toc:function(){return c},default:function(){return g}});var n=a(87462),s=a(63366),r=(a(67294),a(3905)),l=a(26396),o=a(58215),p=["components"],i={id:"test-parameterize",title:"Parameterize tests"},m=void 0,u={unversionedId:"test-parameterize",id:"version-1.17/test-parameterize",isDocsHomePage:!1,title:"Parameterize tests",description:"You can either parameterize tests on a test level or on a project level.",source:"@site/versioned_docs/version-1.17/test-parameterize.mdx",sourceDirName:".",slug:"/test-parameterize",permalink:"/docs/test-parameterize",tags:[],version:"1.17",frontMatter:{id:"test-parameterize",title:"Parameterize tests"},sidebar:"version-1.17/docs",previous:{title:"Parallelism and sharding",permalink:"/docs/test-parallel"},next:{title:"Reporters",permalink:"/docs/test-reporters"}},c=[{value:"Parametrized Tests",id:"parametrized-tests",children:[],level:2},{value:"Parametrized Projects",id:"parametrized-projects",children:[],level:2}],d={toc:c};function g(e){var t=e.components,a=(0,s.Z)(e,p);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can either parameterize tests on a test level or on a project level."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#parametrized-tests"},"Parametrized Tests")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#parametrized-projects"},"Parametrized Projects"))),(0,r.kt)("h2",{id:"parametrized-tests"},"Parametrized Tests"),(0,r.kt)(l.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// example.spec.ts\nconst people = ['Alice', 'Bob'];\nfor (const name of people) {\n  test(`testing with ${name}`, async () => {\n    // ...\n  });\n  // You can also do it with test.describe() or with multiple tests as long the test name is unique.\n}\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// example.spec.js\nconst people = ['Alice', 'Bob'];\nfor (const name of people) {\n  test(`testing with ${name}`, async () => {\n    // ...\n  });\n  // You can also do it with test.describe() or with multiple tests as long the test name is unique.\n}\n")))),(0,r.kt)("h2",{id:"parametrized-projects"},"Parametrized Projects"),(0,r.kt)("p",null,"Playwright Test supports running multiple test projects at the same time. In the following example, we'll run two projects with different parameters. A parameter itself is represented as a ",(0,r.kt)("a",{parentName:"p",href:"./api/class-fixtures"},(0,r.kt)("inlineCode",{parentName:"a"},"fixture")),", where the value gets set from the config. The first project runs with the value ",(0,r.kt)("inlineCode",{parentName:"p"},"Alice")," and the second with the value ",(0,r.kt)("inlineCode",{parentName:"p"},"Bob"),"."),(0,r.kt)(l.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// my-test.ts\nimport { test as base } from '@playwright/test';\n\nexport type TestOptions = {\n  person: string;\n};\n\nexport const test = base.extend<TestOptions>({\n  // Default value for the person.\n  person: 'not-set',\n});\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// my-test.js\nconst base = require('@playwright/test');\n\nexports.test = base.test.extend({\n  // Default value for person.\n  person: 'not-set',\n});\n")))),(0,r.kt)("p",null,"We can use our fixtures in the test."),(0,r.kt)(l.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// example.spec.ts\nimport { test } from './my-test';\n\ntest('test 1', async ({ page, person }) => {\n  await page.goto(`/index.html`);\n  await expect(page.locator('#node')).toContainText(person);\n  // ...\n});\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// example.spec.js\nconst { test } = require('./my-test');\n\ntest('test 1', async ({ page, person }) => {\n  await page.goto(`/index.html`);\n  await expect(page.locator('#node')).toContainText(person);\n  // ...\n});\n")))),(0,r.kt)("p",null,"Now, we can run test in multiple configurations by using projects."),(0,r.kt)(l.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// playwright.config.ts\nimport { PlaywrightTestConfig } from '@playwright/test';\nimport { TestOptions } from './my-test';\n\nconst config: PlaywrightTestConfig<TestOptions> = {\n  timeout: 20000,\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'Bob',\n      use: { person: 'Bob' },\n    },\n  ]\n};\nexport default config;\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// playwright.config.js\n// @ts-check\n\n/** @type {import('@playwright/test').PlaywrightTestConfig<{ person: string }>} */\nconst config = {\n  projects: [\n    {\n      name: 'Alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'Bob',\n      use: { person: 'Bob' },\n    },\n  ]\n};\n\nmodule.exports = config;\n")))))}g.isMDXComponent=!0}}]);