"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[48340],{40654:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return m},default:function(){return g}});var n=a(87462),s=a(63366),r=(a(67294),a(3905)),o=a(26396),p=a(58215),l=["components"],i={id:"test-parameterize",title:"Parametrize tests"},u=void 0,c={unversionedId:"test-parameterize",id:"version-1.18-rc1/test-parameterize",isDocsHomePage:!1,title:"Parametrize tests",description:"You can either parametrize tests on a test level or on a project level.",source:"@site/versioned_docs/version-1.18-rc1/test-parameterize.mdx",sourceDirName:".",slug:"/test-parameterize",permalink:"/docs/test-parameterize",tags:[],version:"1.18-rc1",frontMatter:{id:"test-parameterize",title:"Parametrize tests"},sidebar:"version-1.18-rc1/docs",previous:{title:"Parallelism and sharding",permalink:"/docs/test-parallel"},next:{title:"Reporters",permalink:"/docs/test-reporters"}},m=[{value:"Parameterized Tests",id:"parameterized-tests",children:[],level:2},{value:"Parameterized Projects",id:"parameterized-projects",children:[],level:2}],d={toc:m};function g(e){var t=e.components,a=(0,s.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You can either parametrize tests on a test level or on a project level."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#parameterized-tests"},"Parameterized Tests")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#parameterized-projects"},"Parameterized Projects"))),(0,r.kt)("h2",{id:"parameterized-tests"},"Parameterized Tests"),(0,r.kt)(o.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// example.spec.ts\nconst people = ['Alice', 'Bob'];\nfor (const name of people) {\n  test(`testing with ${name}`, async () => {\n    // ...\n  });\n  // You can also do it with test.describe() or with multiple tests as long the test name is unique.\n}\n"))),(0,r.kt)(p.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// example.spec.js\nconst people = ['Alice', 'Bob'];\nfor (const name of people) {\n  test(`testing with ${name}`, async () => {\n    // ...\n  });\n  // You can also do it with test.describe() or with multiple tests as long the test name is unique.\n}\n")))),(0,r.kt)("h2",{id:"parameterized-projects"},"Parameterized Projects"),(0,r.kt)("p",null,"Playwright Test supports running multiple test projects at the same time. In the following example, we'll run two projects with different options."),(0,r.kt)("p",null,"We declare the option ",(0,r.kt)("inlineCode",{parentName:"p"},"person")," and set the value in the config. The first project runs with the value ",(0,r.kt)("inlineCode",{parentName:"p"},"Alice")," and the second with the value ",(0,r.kt)("inlineCode",{parentName:"p"},"Bob"),"."),(0,r.kt)(o.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// my-test.ts\nimport { test as base } from '@playwright/test';\n\nexport type TestOptions = {\n  person: string;\n};\n\nexport const test = base.extend<TestOptions>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n});\n"))),(0,r.kt)(p.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// my-test.js\nconst base = require('@playwright/test');\n\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n});\n")))),(0,r.kt)("p",null,"We can use this option in the test, similarly to ",(0,r.kt)("a",{parentName:"p",href:"/docs/test-fixtures"},"fixtures"),"."),(0,r.kt)(o.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// example.spec.ts\nimport { test } from './my-test';\n\ntest('test 1', async ({ page, person }) => {\n  await page.goto(`/index.html`);\n  await expect(page.locator('#node')).toContainText(person);\n  // ...\n});\n"))),(0,r.kt)(p.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// example.spec.js\nconst { test } = require('./my-test');\n\ntest('test 1', async ({ page, person }) => {\n  await page.goto(`/index.html`);\n  await expect(page.locator('#node')).toContainText(person);\n  // ...\n});\n")))),(0,r.kt)("p",null,"Now, we can run tests in multiple configurations by using projects."),(0,r.kt)(o.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// playwright.config.ts\nimport { PlaywrightTestConfig } from '@playwright/test';\nimport { TestOptions } from './my-test';\n\nconst config: PlaywrightTestConfig<TestOptions> = {\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'bob',\n      use: { person: 'Bob' },\n    },\n  ]\n};\nexport default config;\n"))),(0,r.kt)(p.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// playwright.config.js\n// @ts-check\n\n/** @type {import('@playwright/test').PlaywrightTestConfig<{ person: string }>} */\nconst config = {\n  projects: [\n    {\n      name: 'alice',\n      use: { person: 'Alice' },\n    },\n    {\n      name: 'bob',\n      use: { person: 'Bob' },\n    },\n  ]\n};\n\nmodule.exports = config;\n")))),(0,r.kt)("p",null,"We can also use the option in a fixture. Learn more about ",(0,r.kt)("a",{parentName:"p",href:"/docs/test-fixtures"},"fixtures"),"."),(0,r.kt)(o.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// my-test.ts\nimport { test as base } from '@playwright/test';\n\nexport type TestOptions = {\n  person: string;\n};\n\nexport const test = base.test.extend<TestOptions>({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n\n  // Override default \"page\" fixture.\n  page: async ({ page, person }, use) => {\n    await page.goto('/chat');\n    // We use \"person\" parameter as a \"name\" for the chat room.\n    await page.locator('#name').fill(person);\n    await page.click('text=Enter chat room');\n    // Each test will get a \"page\" that already has the person name.\n    await use(page);\n  },\n});\n"))),(0,r.kt)(p.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// my-test.js\nconst base = require('@playwright/test');\n\nexports.test = base.test.extend({\n  // Define an option and provide a default value.\n  // We can later override it in the config.\n  person: ['John', { option: true }],\n\n  // Override default \"page\" fixture.\n  page: async ({ page, person }, use) => {\n    await page.goto('/chat');\n    // We use \"person\" parameter as a \"name\" for the chat room.\n    await page.locator('#name').fill(person);\n    await page.click('text=Enter chat room');\n    // Each test will get a \"page\" that already has the person name.\n    await use(page);\n  },\n});\n")))))}g.isMDXComponent=!0}}]);