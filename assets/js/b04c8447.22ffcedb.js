"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[60390],{5834:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return h}});var s=a(87462),n=a(63366),o=(a(67294),a(3905)),r=(a(26396),a(58215),["components"]),i={id:"test-assertions",title:"Assertions"},l=void 0,c={unversionedId:"test-assertions",id:"test-assertions",isDocsHomePage:!1,title:"Assertions",description:"Playwright Test uses expect library for test assertions. This library provides a lot of matchers like toEqual, toContain, toMatch, toMatchSnapshot and many more:",source:"@site/docs/test-assertions.mdx",sourceDirName:".",slug:"/test-assertions",permalink:"/docs/next/test-assertions",tags:[],version:"current",frontMatter:{id:"test-assertions",title:"Assertions"},sidebar:"docs",previous:{title:"API testing",permalink:"/docs/next/test-api-testing"},next:{title:"Authentication",permalink:"/docs/next/test-auth"}},p=[{value:"Negating Matchers",id:"negating-matchers",children:[],level:2},{value:"Soft Assertions",id:"soft-assertions",children:[],level:2},{value:"Custom Expect Message",id:"custom-expect-message",children:[],level:2},{value:"API reference",id:"api-reference",children:[],level:2}],u={toc:p};function h(e){var t=e.components,a=(0,n.Z)(e,r);return(0,o.kt)("wrapper",(0,s.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Playwright Test uses ",(0,o.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/expect"},"expect")," library for test assertions. This library provides a lot of matchers like ",(0,o.kt)("inlineCode",{parentName:"p"},"toEqual"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"toContain"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"toMatch"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"toMatchSnapshot")," and many more:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"expect(success).toBeTruthy();\n")),(0,o.kt)("p",null,"Playwright also extends it with convenience async matchers that will wait until the expected condition is met. Consider the following example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await expect(page.locator('.status')).toHaveText('Submitted');\n")),(0,o.kt)("p",null,"Playwright Test will be re-testing the node with the selector ",(0,o.kt)("inlineCode",{parentName:"p"},".status")," until fetched Node has the ",(0,o.kt)("inlineCode",{parentName:"p"},'"Submitted"')," text. It will be re-fetching the node and checking it over and over, until the condition is met or until the timeout is reached. You can either pass this timeout or configure it once via the ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/api/class-testconfig#test-config-expect"},"testConfig.expect")," value in test config."),(0,o.kt)("p",null,"By default, the timeout for assertions is set to 5 seconds. Learn more about ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/test-timeouts"},"various timeouts"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#negating-matchers"},"Negating Matchers")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#soft-assertions"},"Soft Assertions")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#custom-expect-message"},"Custom Expect Message")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#api-reference"},"API reference"))),(0,o.kt)("h2",{id:"negating-matchers"},"Negating Matchers"),(0,o.kt)("p",null,"In general, we can expect the opposite to be true by adding a ",(0,o.kt)("inlineCode",{parentName:"p"},".not")," to the front of the matchers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'expect(value).not.toEqual(0);\nawait expect(locator).not.toContainText("some text");\n')),(0,o.kt)("h2",{id:"soft-assertions"},"Soft Assertions"),(0,o.kt)("p",null,"By default, failed assertion will terminate test execution. Playwright also supports ",(0,o.kt)("em",{parentName:"p"},"soft assertions"),": failed soft assertions ",(0,o.kt)("strong",{parentName:"p"},"do not")," terminate test execution, but mark the test as failed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.locator('#status')).toHaveText('Success');\nawait expect.soft(page.locator('#eta')).toHaveText('1 day');\n\n// ... and continue the test to check more things.\nawait page.locator('#next-page').click();\nawait expect.soft(page.locator('#title')).toHaveText('Make another order');\n")),(0,o.kt)("p",null,"At any point during test execution, you can check whether there were any soft assertion failures:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Make a few checks that will not stop the test when failed...\nawait expect.soft(page.locator('#status')).toHaveText('Success');\nawait expect.soft(page.locator('#eta')).toHaveText('1 day');\n\n// Avoid running further if there were soft assertion failures.\nexpect(test.info().errors).toBeEmpty();\n")),(0,o.kt)("h2",{id:"custom-expect-message"},"Custom Expect Message"),(0,o.kt)("p",null,"You can specify a custom error message as a second argument to the ",(0,o.kt)("inlineCode",{parentName:"p"},"expect")," function, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await expect(page.locator('text=Name'), 'should be logged in').toBeVisible();\n")),(0,o.kt)("p",null,"The error would look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"    Error: should be logged in\n\n    Call log:\n      - expect.toBeVisible with timeout 5000ms\n      - waiting for selector \"text=Name\"\n\n\n      2 |\n      3 | test('example test', async({ page }) => {\n    > 4 |   await expect(page.locator('text=Name'), 'should be logged in').toBeVisible();\n        |                                                                  ^\n      5 | });\n      6 |\n")),(0,o.kt)("p",null,"The same works with soft assertions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"expect.soft(value, 'my soft assertion').toBe(56);\n")),(0,o.kt)("h2",{id:"api-reference"},"API reference"),(0,o.kt)("p",null,"See the following pages for Playwright-specific assertions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/next/api/class-apiresponseassertions",title:"APIResponseAssertions"},"APIResponseAssertions")," assertions for ",(0,o.kt)("a",{parentName:"li",href:"/docs/next/api/class-apiresponse",title:"APIResponse"},"APIResponse")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/next/api/class-locatorassertions",title:"LocatorAssertions"},"LocatorAssertions")," assertions for ",(0,o.kt)("a",{parentName:"li",href:"/docs/next/api/class-locator",title:"Locator"},"Locator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/next/api/class-pageassertions",title:"PageAssertions"},"PageAssertions")," assertions for ",(0,o.kt)("a",{parentName:"li",href:"/docs/next/api/class-page",title:"Page"},"Page")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/next/api/class-screenshotassertions",title:"ScreenshotAssertions"},"ScreenshotAssertions")," for comparing screenshot with stored value")))}h.isMDXComponent=!0}}]);