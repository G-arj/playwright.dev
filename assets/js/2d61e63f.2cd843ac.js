(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[23134],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return a?n.createElement(k,l(l({ref:t},u),{},{components:a})):n.createElement(k,l({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},73706:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return s},default:function(){return u}});var n=a(22122),r=a(19756),o=(a(67294),a(3905)),l={id:"network",title:"Network"},i={unversionedId:"network",id:"version-1.1.0/network",isDocsHomePage:!1,title:"Network",description:"Playwright provides APIs to monitor and modify network traffic, both HTTP and HTTPS.",source:"@site/versioned_docs/version-1.1.0/network.mdx",sourceDirName:".",slug:"/network",permalink:"/docs/1.1.0/network",version:"1.1.0",frontMatter:{id:"network",title:"Network"},sidebar:"version-1.1.0/docs",previous:{title:"Device and environment emulation",permalink:"/docs/1.1.0/emulation"},next:{title:"Scraping and verification",permalink:"/docs/1.1.0/verification"}},s=[{value:"HTTP Authentication",id:"http-authentication",children:[]},{value:"Handle file downloads",id:"handle-file-downloads",children:[]},{value:"Network events",id:"network-events",children:[]},{value:"Handle requests",id:"handle-requests",children:[]},{value:"Modify requests",id:"modify-requests",children:[]},{value:"Abort requests",id:"abort-requests",children:[]}],p={toc:s};function u(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Playwright provides APIs to ",(0,o.kt)("strong",{parentName:"p"},"monitor")," and ",(0,o.kt)("strong",{parentName:"p"},"modify")," network traffic, both HTTP and HTTPS.\nAny requests that page does, including ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"},"XHRs")," and\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"fetch")," requests, can be tracked, modified and handled."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#http-authentication"},"HTTP Authentication")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#handle-file-downloads"},"Handle file downloads")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#network-events"},"Network events")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#handle-requests"},"Handle requests")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#modify-requests"},"Modify requests")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#abort-requests"},"Abort requests"))),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"http-authentication"},"HTTP Authentication"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const context = await browser.newContext({\n  httpCredentials: {\n    username: 'bill',\n    password: 'pa55w0rd',\n  },\n});\nconst page = await context.newPage();\nawait page.goto('https://example.com');\n")),(0,o.kt)("p",null,"You can also use ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.1.0/api/class-browser#browsercontextsethttpcredentialshttpcredentials"},(0,o.kt)("inlineCode",{parentName:"a"},"browserContext.setHTTPCredentials"))," to update HTTP credentials of an existing context."),(0,o.kt)("h4",{id:"api-reference"},"API reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-browser#browsernewcontextoptions"},(0,o.kt)("inlineCode",{parentName:"a"},"browser.newContext([options])"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-browsercontext#browsercontextsethttpcredentialshttpcredentials"},(0,o.kt)("inlineCode",{parentName:"a"},"browserContext.setHTTPCredentials(httpCredentials)")))),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"handle-file-downloads"},"Handle file downloads"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const [ download ] = await Promise.all([\n  page.waitForEvent('download'), // <-- start waiting for the download\n  page.click('button#delayed-download') // <-- perform the action that directly or indirectly initiates it.\n]);\nconst path = await download.path();\n")),(0,o.kt)("p",null,"For every attachment downloaded by the page, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/playwright/blob/master/docs/api/class-page.mdx#event-download"},(0,o.kt)("inlineCode",{parentName:"a"},'"download"'))," event is emitted. If you create a browser context with the ",(0,o.kt)("inlineCode",{parentName:"p"},"acceptDownloads: true"),", all these attachments are going to be downloaded into a temporary folder. You can obtain the download url, file system path and payload stream using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/playwright/blob/master/docs/api/class-download.mdx#class-download"},(0,o.kt)("inlineCode",{parentName:"a"},"Download"))," object from the event."),(0,o.kt)("h4",{id:"variations"},"Variations"),(0,o.kt)("p",null,"If you have no idea what initiates the download, you can still handle the event:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"page.on('download', download => download.path().then(console.log));\n")),(0,o.kt)("p",null,"Note that handling the event forks the control flow and makes script harder to follow. Your scenario might end while you are downloading a file since your main control flow is not awaiting for this operation to resolve."),(0,o.kt)("h4",{id:"api-reference-1"},"API reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/playwright/blob/master/docs/class-download.mdx"},(0,o.kt)("inlineCode",{parentName:"a"},"Download"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-page#event-download"},(0,o.kt)("inlineCode",{parentName:"a"},"page.on('download')"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-page#pagewaitforeventevent-optionsorpredicate"},(0,o.kt)("inlineCode",{parentName:"a"},"page.waitForEvent(event)")))),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"network-events"},"Network events"),(0,o.kt)("p",null,"You can monitor all the requests and responses:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { chromium, webkit, firefox } = require('playwright');\n\n(async () => {\n  const browser = await chromium.launch();\n  const page = await browser.newPage();\n\n  // Subscribe to 'request' and 'response' events.\n  page.on('request', request =>\n      console.log('>>', request.method(), request.url()));\n  page.on('response', response =>\n      console.log('<<', response.status(), response.url()));\n  await page.goto('https://example.com');\n\n  await browser.close();\n})();\n")),(0,o.kt)("p",null,"Or wait for a network response after the button click:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Use a glob URL pattern\nconst [response] = await Promise.all([\n  page.waitForResponse('**/api/fetch_data'),\n  page.click('button#update'),\n]);\n")),(0,o.kt)("h4",{id:"variations-1"},"Variations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Use a RegExp\nconst [response] = await Promise.all([\n  page.waitForResponse(/\\.jpeg$/),\n  page.click('button#update'),\n]);\n\n// Use a predicate taking a Response object\nconst [response] = await Promise.all([\n  page.waitForResponse(response => response.url().includes(token)),\n  page.click('button#update'),\n]);\n")),(0,o.kt)("h4",{id:"api-reference-2"},"API reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-request#class-request"},"class ",(0,o.kt)("inlineCode",{parentName:"a"},"Request"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-response#class-response"},"class ",(0,o.kt)("inlineCode",{parentName:"a"},"Response"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-page#event-request"},"event ",(0,o.kt)("inlineCode",{parentName:"a"},"'request'"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-page#event-response"},"event ",(0,o.kt)("inlineCode",{parentName:"a"},"'response'"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-page#pagewaitforrequesturlorpredicate-options"},(0,o.kt)("inlineCode",{parentName:"a"},"page.waitForRequest(urlOrPredicate[, options])"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-page#pagewaitforresponseurlorpredicate-options"},(0,o.kt)("inlineCode",{parentName:"a"},"page.waitForResponse(urlOrPredicate[, options])")))),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"handle-requests"},"Handle requests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await page.route('**/api/fetch_data', route => route.fulfill({\n  status: 200,\n  body: testData,\n}));\nawait page.goto('https://example.com');\n")),(0,o.kt)("p",null,"You can mock API endpoints via handling the network quests in your Playwright script."),(0,o.kt)("h4",{id:"variations-2"},"Variations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Set up route on the entire browser context.\n// It will apply to popup windows and opened links.\n\nawait browserContext.route('**/api/login', route => route.fulfill({\n  status: 200,\n  body: 'accept',\n}));\nawait page.goto('https://example.com');\n")),(0,o.kt)("h4",{id:"api-reference-3"},"API reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-browsercontext#browsercontextrouteurl-handler"},(0,o.kt)("inlineCode",{parentName:"a"},"browserContext.route(url, handler)"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-browsercontext#browsercontextunrouteurl-handler"},(0,o.kt)("inlineCode",{parentName:"a"},"browserContext.unroute(url[, handler])"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-page#pagerouteurl-handler"},(0,o.kt)("inlineCode",{parentName:"a"},"page.route(url, handler)"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-page#pageunrouteurl-handler"},(0,o.kt)("inlineCode",{parentName:"a"},"page.unroute(url[, handler])"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-route#class-route"},(0,o.kt)("inlineCode",{parentName:"a"},"Route")))),(0,o.kt)("br",null),(0,o.kt)("h2",{id:"modify-requests"},"Modify requests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Delete header\nawait page.route('**/*', route => {\n  const headers = route.request().headers();\n  delete headers['X-Secret'];\n  route.continue({headers});\n});\n\n// Continue requests as POST.\nawait page.route('**/*', route => route.continue({method: 'POST'}));\n")),(0,o.kt)("p",null,"You can continue requests with modifications. Example above removes an HTTP header from the outgoing requests."),(0,o.kt)("h2",{id:"abort-requests"},"Abort requests"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await page.route('**/*.{png,jpg,jpeg}', route => route.abort());\n\n// Abort based on the request type\nawait page.route('**/*', route => {\n  return route.request().resourceType() === 'image' ?\n      route.abort() : route.continue();\n});\n")),(0,o.kt)("h4",{id:"api-reference-4"},"API reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-page#pagerouteurl-handler"},(0,o.kt)("inlineCode",{parentName:"a"},"page.route(url, handler)"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-browsercontext#browsercontextrouteurl-handler"},(0,o.kt)("inlineCode",{parentName:"a"},"browserContext.route(url, handler)"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/1.1.0/api/class-route#routeaborterrorcode"},(0,o.kt)("inlineCode",{parentName:"a"},"route.abort([errorCode])")))),(0,o.kt)("br",null))}u.isMDXComponent=!0}}]);