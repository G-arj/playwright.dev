"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[6874],{3905:function(e,s,t){t.d(s,{Zo:function(){return c},kt:function(){return d}});var n=t(67294);function r(e,s,t){return s in e?Object.defineProperty(e,s,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[s]=t,e}function o(e,s){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);s&&(n=n.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var s=1;s<arguments.length;s++){var t=null!=arguments[s]?arguments[s]:{};s%2?o(Object(t),!0).forEach((function(s){r(e,s,t[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(t,s))}))}return e}function i(e,s){if(null==e)return{};var t,n,r=function(e,s){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],s.indexOf(t)>=0||(r[t]=e[t]);return r}(e,s);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],s.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),l=function(e){var s=n.useContext(p),t=s;return e&&(t="function"==typeof e?e(s):a(a({},s),e)),t},c=function(e){var s=l(e.components);return n.createElement(p.Provider,{value:s},e.children)},u={inlineCode:"code",wrapper:function(e){var s=e.children;return n.createElement(n.Fragment,{},s)}},f=n.forwardRef((function(e,s){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=l(t),d=r,m=f["".concat(p,".").concat(d)]||f[d]||u[d]||o;return t?n.createElement(m,a(a({ref:s},c),{},{components:t})):n.createElement(m,a({ref:s},c))}));function d(e,s){var t=arguments,r=s&&s.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=f;var i={};for(var p in s)hasOwnProperty.call(s,p)&&(i[p]=s[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var l=2;l<o;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},94422:function(e,s,t){t.r(s),t.d(s,{assets:function(){return h},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return f},metadata:function(){return m},toc:function(){return b}});var n=t(3905),r=Object.defineProperty,o=Object.defineProperties,a=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,c=(e,s,t)=>s in e?r(e,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[s]=t,u=(e,s)=>{for(var t in s||(s={}))p.call(s,t)&&c(e,t,s[t]);if(i)for(var t of i(s))l.call(s,t)&&c(e,t,s[t]);return e};const f={id:"class-apiresponseassertions",title:"APIResponseAssertions"},d=void 0,m={unversionedId:"api/class-apiresponseassertions",id:"version-1.19/api/class-apiresponseassertions",title:"APIResponseAssertions",description:"The APIResponseAssertions] class provides assertion methods that can be used to make assertions about the [APIResponse] in the tests. A new instance of [APIResponseAssertions] is created by calling [playwrightAssertions.expect(response):",source:"@site/versioned_docs/version-1.19/api/class-apiresponseassertions.mdx",sourceDirName:"api",slug:"/api/class-apiresponseassertions",permalink:"/docs/api/class-apiresponseassertions",tags:[],version:"1.19",frontMatter:{id:"class-apiresponseassertions",title:"APIResponseAssertions"},sidebar:"version-1.19/api",previous:{title:"APIResponse",permalink:"/docs/api/class-apiresponse"},next:{title:"Browser",permalink:"/docs/api/class-browser"}},h={},b=[{value:"apiResponseAssertions.not()",id:"api-response-assertions-not",level:2},{value:"apiResponseAssertions.toBeOK()",id:"api-response-assertions-to-be-ok",level:2}],y={toc:b};function k(e){var s,t=e,{components:r}=t,c=((e,s)=>{var t={};for(var n in e)p.call(e,n)&&s.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&i)for(var n of i(e))s.indexOf(n)<0&&l.call(e,n)&&(t[n]=e[n]);return t})(t,["components"]);return(0,n.kt)("wrapper",(s=u(u({},y),c),o(s,a({components:r,mdxType:"MDXLayout"}))),(0,n.kt)("p",null,"The ",(0,n.kt)("a",u({parentName:"p"},{href:"/docs/api/class-apiresponseassertions",title:"APIResponseAssertions"}),"APIResponseAssertions")," class provides assertion methods that can be used to make assertions about the ",(0,n.kt)("a",u({parentName:"p"},{href:"/docs/api/class-apiresponse",title:"APIResponse"}),"APIResponse")," in the tests. A new instance of ",(0,n.kt)("a",u({parentName:"p"},{href:"/docs/api/class-apiresponseassertions",title:"APIResponseAssertions"}),"APIResponseAssertions")," is created by calling ",(0,n.kt)("a",u({parentName:"p"},{href:"/docs/api/class-playwrightassertions#playwright-assertions-expect-api-response"}),"playwrightAssertions.expect(response)"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-js"}),"import { test, expect } from '@playwright/test';\n\ntest('navigates to login', async ({ page }) => {\n  // ...\n  const response = await page.request.get('https://playwright.dev');\n  await expect(response).toBeOK();\n});\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",u({parentName:"li"},{href:"/docs/api/class-apiresponseassertions#api-response-assertions-not"}),"apiResponseAssertions.not()")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",u({parentName:"li"},{href:"/docs/api/class-apiresponseassertions#api-response-assertions-to-be-ok"}),"apiResponseAssertions.toBeOK()"))),(0,n.kt)("h2",u({},{id:"api-response-assertions-not"}),"apiResponseAssertions.not()"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns:",(0,n.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"api-response-assertions-not-return"})," ","<",(0,n.kt)("a",u({parentName:"li"},{href:"/docs/api/class-apiresponseassertions",title:"APIResponseAssertions"}),"APIResponseAssertions"),">",(0,n.kt)("a",{href:"#api-response-assertions-not-return",class:"list-anchor"},"#"))),(0,n.kt)("p",null,"Makes the assertion check for the opposite condition. For example, this code tests that the response status is not successful:"),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-js"}),"await expect(response).not.toBeOK();\n")),(0,n.kt)("h2",u({},{id:"api-response-assertions-to-be-ok"}),"apiResponseAssertions.toBeOK()"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns:",(0,n.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"api-response-assertions-to-be-ok-return"})," ","<",(0,n.kt)("a",u({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",title:"Promise"}),"Promise"),"<",(0,n.kt)("a",u({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"}),"void"),">",">",(0,n.kt)("a",{href:"#api-response-assertions-to-be-ok-return",class:"list-anchor"},"#"))),(0,n.kt)("p",null,"Ensures the response status code is within ","[200..299]"," range."),(0,n.kt)("pre",null,(0,n.kt)("code",u({parentName:"pre"},{className:"language-js"}),"await expect(response).toBeOK();\n")))}k.isMDXComponent=!0}}]);