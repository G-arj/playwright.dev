"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[3939],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),h=s,g=d["".concat(l,".").concat(h)]||d[h]||c[h]||i;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,r[1]=o;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:s},t)}},5064:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(7294),s=n(9443);var i=function(){var e=(0,a.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},r=n(6010),o="tabItem_1uMI",l="tabItemActive_2DSg";var u=37,p=39;var c=function(e){var t=e.lazy,n=e.block,s=e.defaultValue,c=e.values,d=e.groupId,h=e.className,g=i(),m=g.tabGroupChoices,f=g.setTabGroupChoices,w=(0,a.useState)(s),b=w[0],k=w[1],v=a.Children.toArray(e.children),x=[];if(null!=d){var y=m[d];null!=y&&y!==b&&c.some((function(e){return e.value===y}))&&k(y)}var A=function(e){var t=e.currentTarget,n=x.indexOf(t),a=c[n].value;k(a),null!=d&&(f(d,a),setTimeout((function(){var e,n,a,s,i,r,o,u;(e=t.getBoundingClientRect(),n=e.top,a=e.left,s=e.bottom,i=e.right,r=window,o=r.innerHeight,u=r.innerWidth,n>=0&&i<=u&&s<=o&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(l),setTimeout((function(){return t.classList.remove(l)}),2e3))}),150))},P=function(e){var t,n;switch(e.keyCode){case p:var a=x.indexOf(e.target)+1;n=x[a]||x[0];break;case u:var s=x.indexOf(e.target)-1;n=x[s]||x[x.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},h)},c.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,className:(0,r.Z)("tabs__item",o,{"tabs__item--active":b===t}),key:t,ref:function(e){return x.push(e)},onKeyDown:P,onFocus:A,onClick:A},n)}))),t?(0,a.cloneElement)(v.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==b})}))))}},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},4099:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var a=n(2122),s=n(9756),i=(n(7294),n(3905)),r=n(5064),o=n(8215),l={id:"test-api-testing",title:"API testing"},u=void 0,p={unversionedId:"test-api-testing",id:"test-api-testing",isDocsHomePage:!1,title:"API testing",description:"Playwright can be used to get access to the REST API of your application.",source:"@site/docs/test-api-testing.mdx",sourceDirName:".",slug:"/test-api-testing",permalink:"/docs/next/test-api-testing",version:"current",frontMatter:{id:"test-api-testing",title:"API testing"},sidebar:"docs",previous:{title:"Annotations",permalink:"/docs/next/test-annotations"},next:{title:"Assertions",permalink:"/docs/next/test-assertions"}},c=[{value:"Writing API Test",id:"writing-api-test",children:[{value:"Configuration",id:"configuration",children:[]},{value:"Writing tests",id:"writing-tests",children:[]},{value:"Setup and teardown",id:"setup-and-teardown",children:[]}]},{value:"Using request context",id:"using-request-context",children:[]},{value:"Sending API requests from UI tests",id:"sending-api-requests-from-ui-tests",children:[{value:"Establishing preconditions",id:"establishing-preconditions",children:[]},{value:"Validating postconditions",id:"validating-postconditions",children:[]}]},{value:"Reusing authentication state",id:"reusing-authentication-state",children:[]}],d={toc:c};function h(e){var t=e.components,n=(0,s.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Playwright can be used to get access to the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Representational_state_transfer"},"REST")," API of your application."),(0,i.kt)("p",null,"Sometimes you may want to send requests to the server directly from Node.js without loading a page and running js code in it. A few examples where it may come in handy:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Test your server API."),(0,i.kt)("li",{parentName:"ul"},"Prepare server side state before visiting the web application in a test."),(0,i.kt)("li",{parentName:"ul"},"Validate server side post-conditions after running some actions in the browser.")),(0,i.kt)("p",null,"All of that could be achieved via ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/api/class-apirequestcontext",title:"APIRequestContext"},"APIRequestContext")," methods."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#writing-api-test"},"Writing API Test"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#configuration"},"Configuration")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#writing-tests"},"Writing tests")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#setup-and-teardown"},"Setup and teardown")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#using-request-context"},"Using request context")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sending-api-requests-from-ui-tests"},"Sending API requests from UI tests"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#establishing-preconditions"},"Establishing preconditions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#validating-postconditions"},"Validating postconditions")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#reusing-authentication-state"},"Reusing authentication state"))),(0,i.kt)("h2",{id:"writing-api-test"},"Writing API Test"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/next/api/class-apirequestcontext",title:"APIRequestContext"},"APIRequestContext")," can send all kinds of HTTP(S) requests over network."),(0,i.kt)("p",null,"The following example demonstrates how to use Playwright to test issues creation via ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest"},"GitHub API"),". The test suite will do the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a new repository before running tests."),(0,i.kt)("li",{parentName:"ul"},"Create a few issues and validate server state."),(0,i.kt)("li",{parentName:"ul"},"Delete the repository after running tests.")),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"GitHub API requires authorization, so we'll configure the token once for all tests. While at it, we'll also set the ",(0,i.kt)("inlineCode",{parentName:"p"},"baseURL")," to simplify the tests. You can either put them in the configuration file, or in the test file with ",(0,i.kt)("inlineCode",{parentName:"p"},"test.use()"),"."),(0,i.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// playwright.config.ts\nimport { PlaywrightTestConfig } from '@playwright/test';\n\nconst config: PlaywrightTestConfig = {\n  use: {\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  }\n};\nexport default config;\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// playwright.config.js\n// @ts-check\n/** @type {import('@playwright/test').PlaywrightTestConfig} */\nconst config = {\n  use: {\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  }\n};\nmodule.exports = config;\n")))),(0,i.kt)("h3",{id:"writing-tests"},"Writing tests"),(0,i.kt)("p",null,"Playwright Test comes with the built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"request")," fixture that respects configuration options like ",(0,i.kt)("inlineCode",{parentName:"p"},"baseURL")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"extraHTTPHeaders")," we specified and is ready to send some requests."),(0,i.kt)("p",null,"Now we can add a few tests that will create new issues in the repository."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const REPO = 'test-repo-1';\nconst USER = 'github-username';\n\ntest('should create a bug report', async ({ request }) => {\n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Bug] report 1',\n      body: 'Bug description',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);\n  expect(issues.ok()).toBeTruthy();\n  expect(await issues.json()).toContainEqual(expect.objectContaining({\n    title: '[Bug] report 1',\n    body: 'Bug description'\n  }));\n});\n\ntest('should create a feature request', async ({ request }) => {\n  const newIssue = await request.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Feature] request 1',\n      body: 'Feature description',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  const issues = await request.get(`/repos/${USER}/${REPO}/issues`);\n  expect(issues.ok()).toBeTruthy();\n  expect(await issues.json()).toContainEqual(expect.objectContaining({\n    title: '[Feature] request 1',\n    body: 'Feature description'\n  }));\n});\n")),(0,i.kt)("h3",{id:"setup-and-teardown"},"Setup and teardown"),(0,i.kt)("p",null,"These tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeAll")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"afterAll")," hooks for that."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"test.beforeAll(async ({ request }) => {\n  // Create a new repository\n  const response = await request.post('/user/repos', {\n    data: {\n      name: REPO\n    }\n  });\n  expect(response.ok()).toBeTruthy();\n});\n\ntest.afterAll(async ({ request }) => {\n  // Delete the repository\n  const response = await request.delete(`/repos/${USER}/${REPO}`);\n  expect(response.ok()).toBeTruthy();\n});\n")),(0,i.kt)("h2",{id:"using-request-context"},"Using request context"),(0,i.kt)("p",null,"Behind the scenes, ",(0,i.kt)("a",{parentName:"p",href:"./api/class-fixtures#fixtures-request"},(0,i.kt)("inlineCode",{parentName:"a"},"request")," fixture")," will actually call ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/api/class-apirequest#api-request-new-context"},"apiRequest.newContext([options])"),". You can always do that manually if you'd like more control. Below is a standalone script that does the same as ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeAll")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"afterAll")," from above."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { request } = require('@playwright/test');\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n(async () => {\n  // Create a context that will issue http requests.\n  const context = await request.newContext({\n    baseURL: 'https://api.github.com',\n  });\n\n  // Create a repository.\n  await context.post('/user/repos', {\n    headers: {\n      'Accept': 'application/vnd.github.v3+json',\n      // Add GitHub personal access token.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n    data: {\n      name: REPO\n    }\n  });\n\n  // Delete a repository.\n  await context.delete(`/repos/${USER}/${REPO}`{\n    headers: {\n      'Accept': 'application/vnd.github.v3+json',\n      // Add GitHub personal access token.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    }\n  });\n})()\n")),(0,i.kt)("h2",{id:"sending-api-requests-from-ui-tests"},"Sending API requests from UI tests"),(0,i.kt)("p",null,"While running tests inside browsers you may want to make calls to the HTTP API of your application. It may be helpful if you need to prepare server state before running a test or to check some postconditions on the server after performing some actions in the browser. All of that could be achieved via ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/api/class-apirequestcontext",title:"APIRequestContext"},"APIRequestContext")," methods."),(0,i.kt)("h3",{id:"establishing-preconditions"},"Establishing preconditions"),(0,i.kt)("p",null,"The following test creates a new issue via API and then navigates to the list of all issues in the project to check that it appears at the top of the list."),(0,i.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n})\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be first in the list', async ({ page }) => {\n  const newIssue = await apiContext.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Feature] request 1',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  const firstIssue = page.locator(`a[data-hovercard-type='issue']`).first();\n  await expect(firstIssue).toHaveText('[Feature] request 1');\n});\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// @ts-check\nconst { test, expect } = require('@playwright/test');\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n})\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be first in the list', async ({ page }) => {\n  const newIssue = await apiContext.post(`/repos/${USER}/${REPO}/issues`, {\n    data: {\n      title: '[Feature] request 1',\n    }\n  });\n  expect(newIssue.ok()).toBeTruthy();\n\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  const firstIssue = page.locator(`a[data-hovercard-type='issue']`).first();\n  await expect(firstIssue).toHaveText('[Feature] request 1');\n});\n")))),(0,i.kt)("h3",{id:"validating-postconditions"},"Validating postconditions"),(0,i.kt)("p",null,"The following test creates a new issue via user interface in the browser and then uses checks if it was created via API:"),(0,i.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { test, expect } from '@playwright/test';\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n})\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be on the server', async ({ page, request }) => {\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  await page.click('text=New Issue');\n  await page.fill('[aria-label=\"Title\"]', 'Bug report 1');\n  await page.fill('[aria-label=\"Comment body\"]', 'Bug description');\n  await page.click('text=Submit new issue');\n  const issueId = page.url().substr(page.url().lastIndexOf('/'));\n\n  const newIssue = await request.get(`https://api.github.com/repos/${USER}/${REPO}/issues/${issueId}`);\n  expect(newIssue.ok()).toBeTruthy();\n  expect(newIssue).toEqual(expect.objectContaining({\n    title: 'Bug report 1'\n  }));\n});\n"))),(0,i.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// @ts-check\nconst { test, expect } = require('@playwright/test');\n\nconst REPO = 'test-repo-1';\nconst USER = 'github-username';\n\n// Request context is reused by all tests in the file.\nlet apiContext;\n\ntest.beforeAll(async ({ playwright }) => {\n  apiContext = await playwright.request.newContext({\n    // All requests we send go to this API endpoint.\n    baseURL: 'https://api.github.com',\n    extraHTTPHeaders: {\n      // We set this header per GitHub guidelines.\n      'Accept': 'application/vnd.github.v3+json',\n      // Add authorization token to all requests.\n      // Assuming personal access token available in the environment.\n      'Authorization': `token ${process.env.API_TOKEN}`,\n    },\n  });\n})\n\ntest.afterAll(async ({ }) => {\n  // Dispose all responses.\n  await apiContext.dispose();\n});\n\ntest('last created issue should be on the server', async ({ page, request }) => {\n  await page.goto(`https://github.com/${USER}/${REPO}/issues`);\n  await page.click('text=New Issue');\n  await page.fill('[aria-label=\"Title\"]', 'Bug report 1');\n  await page.fill('[aria-label=\"Comment body\"]', 'Bug description');\n  await page.click('text=Submit new issue');\n  const issueId = page.url().substr(page.url().lastIndexOf('/'));\n\n  const newIssue = await request.get(`https://api.github.com/repos/${USER}/${REPO}/issues/${issueId}`);\n  expect(newIssue.ok()).toBeTruthy();\n  expect(newIssue).toEqual(expect.objectContaining({\n    title: 'Bug report 1'\n  }));\n});\n")))),(0,i.kt)("h2",{id:"reusing-authentication-state"},"Reusing authentication state"),(0,i.kt)("p",null,"Web apps use cookie-based or token-based authentication, where authenticated state is stored as ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"},"cookies"),". Playwright provides ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/api/class-apirequestcontext#api-request-context-storage-state"},"apiRequestContext.storageState([options])")," method that can be used to retrieve storage state from an authenticated context and then create new contexts with that state."),(0,i.kt)("p",null,"Storage state is interchangeable between ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/api/class-browsercontext",title:"BrowserContext"},"BrowserContext")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/api/class-apirequestcontext",title:"APIRequestContext"},"APIRequestContext"),". You can use it to log in via API calls and then create a new context with cookies already there. The following code snippet retrieves state from an authenticated ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/api/class-apirequestcontext",title:"APIRequestContext"},"APIRequestContext")," and creates a new ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/api/class-browsercontext",title:"BrowserContext"},"BrowserContext")," with that state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const requestContext = await request.newContext({\n  httpCredentials: {\n    username: 'user',\n    password: 'passwd'\n  }\n});\nawait requestContext.get(`https://api.example.com/login`);\n// Save storage state into the file.\nawait requestContext.storageState({ path: 'state.json' });\n\n// Create a new context with the saved storage state.\nconst context = await browser.newContext({ storageState: 'state.json' });\n")))}h.isMDXComponent=!0},6010:function(e,t,n){function a(e){var t,n,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(s&&(s+=" "),s+=n);else for(t in e)e[t]&&(s&&(s+=" "),s+=t);return s}function s(){for(var e,t,n=0,s="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(s&&(s+=" "),s+=t);return s}n.d(t,{Z:function(){return s}})}}]);