"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[9139],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return d}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=u(t),d=a,k=f["".concat(s,".").concat(d)]||f[d]||p[d]||o;return t?n.createElement(k,l(l({ref:r},c),{},{components:t})):n.createElement(k,l({ref:r},c))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=f;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},58215:function(e,r,t){t.d(r,{Z:function(){return a}});var n=t(67294);function a(e){var r=e.children,t=e.hidden,a=e.className;return n.createElement("div",{role:"tabpanel",hidden:t,className:a},r)}},9877:function(e,r,t){t.d(r,{Z:function(){return c}});var n=t(87462),a=t(67294),o=t(72389),l=t(29366),i=t(86010),s="tabItem_LplD";function u(e){var r,t,o,u=e.lazy,c=e.block,p=e.defaultValue,f=e.values,d=e.groupId,k=e.className,m=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:m.map((function(e){var r=e.props;return{value:r.value,label:r.label,attributes:r.attributes}})),w=(0,l.lx)(v,(function(e,r){return e.value===r.value}));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===p?p:null!=(r=null!=p?p:null==(t=m.find((function(e){return e.props.default})))?void 0:t.props.value)?r:null==(o=m[0])?void 0:o.props.value;if(null!==h&&!v.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,l.UB)(),g=b.tabGroupChoices,y=b.setTabGroupChoices,N=(0,a.useState)(h),I=N[0],x=N[1],T=[],j=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var O=g[d];null!=O&&O!==I&&v.some((function(e){return e.value===O}))&&x(O)}var E=function(e){var r=e.currentTarget,t=T.indexOf(r),n=v[t].value;n!==I&&(j(r),x(n),null!=d&&y(d,n))},C=function(e){var r,t=null;switch(e.key){case"ArrowRight":var n=T.indexOf(e.currentTarget)+1;t=T[n]||T[0];break;case"ArrowLeft":var a=T.indexOf(e.currentTarget)-1;t=T[a]||T[T.length-1]}null==(r=t)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},k)},v.map((function(e){var r=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:I===r?0:-1,"aria-selected":I===r,key:r,ref:function(e){return T.push(e)},onKeyDown:C,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":I===r})}),null!=t?t:r)}))),u?(0,a.cloneElement)(m.filter((function(e){return e.props.value===I}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},m.map((function(e,r){return(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==I})}))))}function c(e){var r=(0,o.Z)();return a.createElement(u,(0,n.Z)({key:String(r)},e))}},93693:function(e,r,t){t.r(r),t.d(r,{assets:function(){return f},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return d}});var n=t(87462),a=t(63366),o=(t(67294),t(3905)),l=t(9877),i=t(58215),s=["components"],u={id:"class-workerinfo",title:"WorkerInfo"},c=void 0,p={unversionedId:"api/class-workerinfo",id:"version-1.19/api/class-workerinfo",title:"WorkerInfo",description:"WorkerInfo contains information about the worker that is running tests. It is available to test.beforeAll(hookFunction) and test.afterAll(hookFunction) hooks and worker-scoped fixtures.",source:"@site/versioned_docs/version-1.19/api/class-workerinfo.mdx",sourceDirName:"api",slug:"/api/class-workerinfo",permalink:"/docs/api/class-workerinfo",tags:[],version:"1.19",frontMatter:{id:"class-workerinfo",title:"WorkerInfo"}},f={},d=[{value:"workerInfo.config",id:"worker-info-config",level:2},{value:"workerInfo.parallelIndex",id:"worker-info-parallel-index",level:2},{value:"workerInfo.project",id:"worker-info-project",level:2},{value:"workerInfo.workerIndex",id:"worker-info-worker-index",level:2}],k={toc:d};function m(e){var r=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},k,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"WorkerInfo")," contains information about the worker that is running tests. It is available to ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-before-all"},"test.beforeAll(hookFunction)")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-after-all"},"test.afterAll(hookFunction)")," hooks and worker-scoped fixtures."),(0,o.kt)(l.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { test, expect } from '@playwright/test';\n\ntest.beforeAll(async ({ browserName }, workerInfo) => {\n  console.log(`Running ${browserName} in worker #${workerInfo.workerIndex}`);\n});\n"))),(0,o.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { test, expect } = require('@playwright/test');\n\ntest.beforeAll(async ({ browserName }, workerInfo) => {\n  console.log(`Running ${browserName} in worker #${workerInfo.workerIndex}`);\n});\n")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/class-workerinfo#worker-info-config"},"workerInfo.config")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/class-workerinfo#worker-info-parallel-index"},"workerInfo.parallelIndex")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/class-workerinfo#worker-info-project"},"workerInfo.project")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/class-workerinfo#worker-info-worker-index"},"workerInfo.workerIndex"))),(0,o.kt)("h2",{id:"worker-info-config"},"workerInfo.config"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: ","<",(0,o.kt)("a",{parentName:"li",href:"/docs/api/class-testconfig",title:"TestConfig"},"TestConfig"),">")),(0,o.kt)("p",null,"Processed configuration from the ",(0,o.kt)("a",{parentName:"p",href:"/docs/test-configuration"},"configuration file"),"."),(0,o.kt)("h2",{id:"worker-info-parallel-index"},"workerInfo.parallelIndex"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: ","<",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">")),(0,o.kt)("p",null,"The index of the worker between ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"workers - 1"),". It is guaranteed that workers running at the same time have a different ",(0,o.kt)("inlineCode",{parentName:"p"},"parallelIndex"),". When a worker is restarted, for example after a failure, the new worker process has the same ",(0,o.kt)("inlineCode",{parentName:"p"},"parallelIndex"),"."),(0,o.kt)("p",null,"Also available as ",(0,o.kt)("inlineCode",{parentName:"p"},"process.env.TEST_PARALLEL_INDEX"),". Learn more about ",(0,o.kt)("a",{parentName:"p",href:"/docs/test-parallel"},"parallelism and sharding")," with Playwright Test."),(0,o.kt)("h2",{id:"worker-info-project"},"workerInfo.project"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: ","<",(0,o.kt)("a",{parentName:"li",href:"/docs/api/class-testproject",title:"TestProject"},"TestProject"),">")),(0,o.kt)("p",null,"Processed project configuration from the ",(0,o.kt)("a",{parentName:"p",href:"/docs/test-configuration"},"configuration file"),"."),(0,o.kt)("h2",{id:"worker-info-worker-index"},"workerInfo.workerIndex"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"type: ","<",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">")),(0,o.kt)("p",null,"The unique index of the worker process that is running the test. When a worker is restarted, for example after a failure, the new worker process gets a new unique ",(0,o.kt)("inlineCode",{parentName:"p"},"workerIndex"),"."),(0,o.kt)("p",null,"Also available as ",(0,o.kt)("inlineCode",{parentName:"p"},"process.env.TEST_WORKER_INDEX"),". Learn more about ",(0,o.kt)("a",{parentName:"p",href:"/docs/test-parallel"},"parallelism and sharding")," with Playwright Test."))}m.isMDXComponent=!0}}]);