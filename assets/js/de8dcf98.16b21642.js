"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[9515],{94020:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return g},toc:function(){return w},default:function(){return h}});var n=a(87462),s=a(63366),r=(a(67294),a(3905)),i=a(26396),o=a(58215),p=["components"],l={id:"test-pom",title:"Page Object Model"},c=void 0,g={unversionedId:"test-pom",id:"version-1.14/test-pom",isDocsHomePage:!1,title:"Page Object Model",description:"Page Object Model is a common pattern that introduces abstractions over web app pages to simplify interactions with them in multiple tests. It is best explained by an example.",source:"@site/versioned_docs/version-1.14/test-pom.mdx",sourceDirName:".",slug:"/test-pom",permalink:"/docs/1.14/test-pom",tags:[],version:"1.14",frontMatter:{id:"test-pom",title:"Page Object Model"},sidebar:"version-1.14/docs",previous:{title:"Configuration",permalink:"/docs/1.14/test-configuration"},next:{title:"Parallelism and sharding",permalink:"/docs/1.14/test-parallel"}},w=[],u={toc:w};function h(t){var e=t.components,a=(0,s.Z)(t,p);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Page Object Model is a common pattern that introduces abstractions over web app pages to simplify interactions with them in multiple tests. It is best explained by an example."),(0,r.kt)("p",null,"We will create a ",(0,r.kt)("inlineCode",{parentName:"p"},"PlaywrightDevPage")," helper class to encapsulate common operations on the ",(0,r.kt)("inlineCode",{parentName:"p"},"playwright.dev")," page. Internally, it will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"page")," object."),(0,r.kt)(i.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// playwright-dev-page.ts\nimport type { Page } from 'playwright';\n\nexport class PlaywrightDevPage {\n  readonly page: Page;\n\n  constructor(page: Page) {\n    this.page = page;\n  }\n\n  async goto() {\n    await this.page.goto('https://playwright.dev');\n  }\n\n  async toc() {\n    const text = await this.page.innerText('article ul');\n    return text.split('\\n').filter(line => !!line);\n  }\n\n  async getStarted() {\n    await this.page.click('text=Get started');\n    await this.page.waitForSelector(`text=Core concepts`);\n  }\n\n  async coreConcepts() {\n    await this.getStarted();\n    await this.page.click('text=Core concepts');\n    await this.page.waitForSelector(`h1:has-text(\"Core concepts\")`);\n  }\n}\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// playwright-dev-page.js\nexports.PlaywrightDevPage = class PlaywrightDevPage {\n  /**\n   * @param {import('playwright').Page} page \n   */\n  constructor(page) {\n    this.page = page;\n  }\n\n  async goto() {\n    await this.page.goto('https://playwright.dev');\n  }\n\n  async toc() {\n    const text = await this.page.innerText('article ul');\n    return text.split('\\n').filter(line => !!line);\n  }\n\n  async getStarted() {\n    await this.page.click('text=Get started');\n    await this.page.waitForSelector(`text=Core concepts`);\n  }\n\n  async coreConcepts() {\n    await this.getStarted();\n    await this.page.click('text=Core concepts');\n    await this.page.waitForSelector(`h1:has-text(\"Core concepts\")`);\n  }\n}\n")))),(0,r.kt)("p",null,"Now we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"PlaywrightDevPage")," class in our tests."),(0,r.kt)(i.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// example.spec.ts\nimport { test, expect } from '@playwright/test';\nimport { PlaywrightDevPage } from './playwright-dev-page';\n\ntest('Get Started table of contents', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.getStarted();\n  expect(await playwrightDev.toc()).toEqual([\n    'Installation',\n    'Usage',\n    'First script',\n    'Record scripts',\n    'TypeScript support',\n    'System requirements',\n    'Release notes'\n  ]);\n});\n\ntest('Core Concepts table of contents', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.coreConcepts();\n  expect(await playwrightDev.toc()).toEqual([\n    'Browser',\n    'Browser contexts',\n    'Pages and frames',\n    'Selectors',\n    'Auto-waiting',\n    'Execution contexts: Playwright and Browser',\n    'Evaluation Argument'\n  ]);\n});\n"))),(0,r.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// example.spec.js\nconst { test, expect } = require('@playwright/test');\nconst { PlaywrightDevPage } = require('./playwright-dev-page');\n\ntest('Get Started table of contents', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.getStarted();\n  expect(await playwrightDev.toc()).toEqual([\n    'Installation',\n    'Usage',\n    'First script',\n    'Record scripts',\n    'TypeScript support',\n    'System requirements',\n    'Release notes'\n  ]);\n});\n\ntest('Core Concepts table of contents', async ({ page }) => {\n  const playwrightDev = new PlaywrightDevPage(page);\n  await playwrightDev.goto();\n  await playwrightDev.coreConcepts();\n  expect(await playwrightDev.toc()).toEqual([\n    'Browser',\n    'Browser contexts',\n    'Pages and frames',\n    'Selectors',\n    'Auto-waiting',\n    'Execution contexts: Playwright and Browser',\n    'Evaluation Argument'\n  ]);\n});\n")))))}h.isMDXComponent=!0}}]);