(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[69676],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return l},kt:function(){return f}});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=o.createContext({}),s=function(e){var t=o.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=s(e.components);return o.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,d=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(r),f=n,k=u["".concat(d,".").concat(f)]||u[f]||p[f]||a;return r?o.createElement(k,i(i({ref:t},l),{},{components:r})):o.createElement(k,i({ref:t},l))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=u;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},58215:function(e,t,r){"use strict";r(67294)},41395:function(e,t,r){"use strict";r(67294),r(80944)},79443:function(e,t,r){"use strict";var o=(0,r(67294).createContext)(void 0);t.Z=o},80944:function(e,t,r){"use strict";var o=r(67294),n=r(79443);t.Z=function(){var e=(0,o.useContext)(n.Z);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},90804:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d},default:function(){return l}});var o=r(22122),n=r(19756),a=(r(67294),r(3905)),i=(r(41395),r(58215),{id:"class-androidsocket",title:"AndroidSocket"}),c={unversionedId:"api/class-androidsocket",id:"version-1.11.0/api/class-androidsocket",isDocsHomePage:!1,title:"AndroidSocket",description:"AndroidSocket] is a way to communicate with a process launched on the [AndroidDevice]. Use [androidDevice.open(command) to open a socket.",source:"@site/versioned_docs/version-1.11.0/api/class-androidsocket.mdx",sourceDirName:"api",slug:"/api/class-androidsocket",permalink:"/docs/api/class-androidsocket",version:"1.11.0",frontMatter:{id:"class-androidsocket",title:"AndroidSocket"},sidebar:"version-1.11.0/api",previous:{title:"AndroidInput",permalink:"/docs/api/class-androidinput"},next:{title:"AndroidWebView",permalink:"/docs/api/class-androidwebview"}},d=[{value:"androidSocket.on(&#39;close&#39;)",id:"androidsocketonclose",children:[]},{value:"androidSocket.on(&#39;data&#39;)",id:"androidsocketondata",children:[]},{value:"androidSocket.close()",id:"androidsocketclose",children:[]},{value:"androidSocket.write(data)",id:"androidsocketwritedata",children:[]}],s={toc:d};function l(e){var t=e.components,r=(0,n.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/api/class-androidsocket",title:"AndroidSocket"},"AndroidSocket")," is a way to communicate with a process launched on the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/class-androiddevice",title:"AndroidDevice"},"AndroidDevice"),". Use ",(0,a.kt)("a",{parentName:"p",href:"/docs/api/class-androiddevice#androiddeviceopencommand"},"androidDevice.open(command)")," to open a socket."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api/class-androidsocket#androidsocketonclose"},"androidSocket.on('close')")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api/class-androidsocket#androidsocketondata"},"androidSocket.on('data')")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api/class-androidsocket#androidsocketclose"},"androidSocket.close()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api/class-androidsocket#androidsocketwritedata"},"androidSocket.write(data)"))),(0,a.kt)("h2",{id:"androidsocketonclose"},"androidSocket.on('close')"),(0,a.kt)("p",null,"Emitted when the socket is closed."),(0,a.kt)("h2",{id:"androidsocketondata"},"androidSocket.on('data')"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"type: <",(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/api/buffer.html#buffer_class_buffer",title:"Buffer"},"Buffer"),">")),(0,a.kt)("p",null,"Emitted when data is available to read from the socket."),(0,a.kt)("h2",{id:"androidsocketclose"},"androidSocket.close()"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"returns: <",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",title:"Promise"},"Promise"),"<",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),">>")),(0,a.kt)("p",null,"Closes the socket."),(0,a.kt)("h2",{id:"androidsocketwritedata"},"androidSocket.write(data)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"data")," <",(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/api/buffer.html#buffer_class_buffer",title:"Buffer"},"Buffer"),"> Data to write."),(0,a.kt)("li",{parentName:"ul"},"returns: <",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",title:"Promise"},"Promise"),"<",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),">>")),(0,a.kt)("p",null,"Writes some ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," to the socket."))}l.isMDXComponent=!0}}]);