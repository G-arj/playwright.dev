"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[3717],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return d}});var a=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},s=Object.keys(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=a.createContext({}),p=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},c=function(t){var e=p(t.components);return a.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,s=t.originalType,l=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),f=p(n),d=i,h=f["".concat(l,".").concat(d)]||f[d]||u[d]||s;return n?a.createElement(h,r(r({ref:e},c),{},{components:n})):a.createElement(h,r({ref:e},c))}));function d(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var s=n.length,r=new Array(s);r[0]=f;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o.mdxType="string"==typeof t?t:i,r[1]=o;for(var p=2;p<s;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},58215:function(t,e,n){var a=n(67294);e.Z=function(t){var e=t.children,n=t.hidden,i=t.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:i},e)}},55064:function(t,e,n){n.d(e,{Z:function(){return u}});var a=n(67294),i=n(79443);var s=function(){var t=(0,a.useContext)(i.Z);if(null==t)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return t},r=n(86010),o="tabItem_1uMI",l="tabItemActive_2DSg";var p=37,c=39;var u=function(t){var e=t.lazy,n=t.block,i=t.defaultValue,u=t.values,f=t.groupId,d=t.className,h=s(),m=h.tabGroupChoices,k=h.setTabGroupChoices,b=(0,a.useState)(i),v=b[0],g=b[1],N=a.Children.toArray(t.children),y=[];if(null!=f){var S=m[f];null!=S&&S!==v&&u.some((function(t){return t.value===S}))&&g(S)}var I=function(t){var e=t.currentTarget,n=y.indexOf(e),a=u[n].value;g(a),null!=f&&(k(f,a),setTimeout((function(){var t,n,a,i,s,r,o,p;(t=e.getBoundingClientRect(),n=t.top,a=t.left,i=t.bottom,s=t.right,r=window,o=r.innerHeight,p=r.innerWidth,n>=0&&s<=p&&i<=o&&a>=0)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(l),setTimeout((function(){return e.classList.remove(l)}),2e3))}),150))},x=function(t){var e,n;switch(t.keyCode){case c:var a=y.indexOf(t.target)+1;n=y[a]||y[0];break;case p:var i=y.indexOf(t.target)-1;n=y[i]||y[y.length-1]}null==(e=n)||e.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},d)},u.map((function(t){var e=t.value,n=t.label;return a.createElement("li",{role:"tab",tabIndex:v===e?0:-1,"aria-selected":v===e,className:(0,r.Z)("tabs__item",o,{"tabs__item--active":v===e}),key:e,ref:function(t){return y.push(t)},onKeyDown:x,onFocus:I,onClick:I},n)}))),e?(0,a.cloneElement)(N.filter((function(t){return t.props.value===v}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},N.map((function(t,e){return(0,a.cloneElement)(t,{key:e,hidden:t.props.value!==v})}))))}},79443:function(t,e,n){var a=(0,n(67294).createContext)(void 0);e.Z=a},10483:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=n(22122),i=n(19756),s=(n(67294),n(3905)),r=n(55064),o=n(58215),l={id:"class-testinfo",title:"TestInfo"},p=void 0,c={unversionedId:"api/class-testinfo",id:"version-1.14.0/api/class-testinfo",isDocsHomePage:!1,title:"TestInfo",description:"TestInfo contains information about currently running test. It is available to any test function, test.beforeEach(hookFunction) and test.afterEach(hookFunction) hooks and test-scoped fixtures. TestInfo provides utilities to control test execution: attach files, update test timeout, determine which test is currently running and whether it was retried, etc.",source:"@site/versioned_docs/version-1.14.0/api/class-testinfo.mdx",sourceDirName:"api",slug:"/api/class-testinfo",permalink:"/docs/api/class-testinfo",version:"1.14.0",frontMatter:{id:"class-testinfo",title:"TestInfo"},sidebar:"version-1.14.0/api",previous:{title:"TestError",permalink:"/docs/api/class-testerror"},next:{title:"TestProject",permalink:"/docs/api/class-testproject"}},u=[{value:"testInfo.fail(condition, description)",id:"test-info-fail",children:[]},{value:"testInfo.fixme(condition, description)",id:"test-info-fixme",children:[]},{value:"testInfo.outputPath(pathSegments)",id:"test-info-output-path",children:[]},{value:"testInfo.setTimeout(timeout)",id:"test-info-set-timeout",children:[]},{value:"testInfo.skip(condition, description)",id:"test-info-skip",children:[]},{value:"testInfo.slow(condition, description)",id:"test-info-slow",children:[]},{value:"testInfo.snapshotPath(snapshotName)",id:"test-info-snapshot-path",children:[]},{value:"testInfo.annotations",id:"test-info-annotations",children:[]},{value:"testInfo.attachments",id:"test-info-attachments",children:[]},{value:"testInfo.column",id:"test-info-column",children:[]},{value:"testInfo.config",id:"test-info-config",children:[]},{value:"testInfo.duration",id:"test-info-duration",children:[]},{value:"testInfo.error",id:"test-info-error",children:[]},{value:"testInfo.expectedStatus",id:"test-info-expected-status",children:[]},{value:"testInfo.file",id:"test-info-file",children:[]},{value:"testInfo.fn",id:"test-info-fn",children:[]},{value:"testInfo.line",id:"test-info-line",children:[]},{value:"testInfo.outputDir",id:"test-info-output-dir",children:[]},{value:"testInfo.project",id:"test-info-project",children:[]},{value:"testInfo.repeatEachIndex",id:"test-info-repeat-each-index",children:[]},{value:"testInfo.retry",id:"test-info-retry",children:[]},{value:"testInfo.snapshotSuffix",id:"test-info-snapshot-suffix",children:[]},{value:"testInfo.status",id:"test-info-status",children:[]},{value:"testInfo.stderr",id:"test-info-stderr",children:[]},{value:"testInfo.stdout",id:"test-info-stdout",children:[]},{value:"testInfo.timeout",id:"test-info-timeout",children:[]},{value:"testInfo.title",id:"test-info-title",children:[]},{value:"testInfo.workerIndex",id:"test-info-worker-index",children:[]}],f={toc:u};function d(t){var e=t.components,n=(0,i.Z)(t,["components"]);return(0,s.kt)("wrapper",(0,a.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"TestInfo")," contains information about currently running test. It is available to any test function, ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-before-each"},"test.beforeEach(hookFunction)")," and ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-after-each"},"test.afterEach(hookFunction)")," hooks and test-scoped fixtures. ",(0,s.kt)("inlineCode",{parentName:"p"},"TestInfo")," provides utilities to control test execution: attach files, update test timeout, determine which test is currently running and whether it was retried, etc."),(0,s.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }, testInfo) => {\n  expect(testInfo.title).toBe('basic test');\n  await page.screenshot(testInfo.outputPath('screenshot.png'));\n});\n"))),(0,s.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { test, expect } = require('@playwright/test');\n\ntest('basic test', async ({ page }, testInfo) => {\n  expect(testInfo.title).toBe('basic test');\n  await page.screenshot(testInfo.outputPath('screenshot.png'));\n});\n")))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-fail"},"testInfo.fail([condition, description])")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-fixme"},"testInfo.fixme([condition, description])")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-output-path"},"testInfo.outputPath(pathSegments)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-set-timeout"},"testInfo.setTimeout(timeout)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-skip"},"testInfo.skip([condition, description])")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-slow"},"testInfo.slow([condition, description])")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-snapshot-path"},"testInfo.snapshotPath(snapshotName)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-annotations"},"testInfo.annotations")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-attachments"},"testInfo.attachments")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-column"},"testInfo.column")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-config"},"testInfo.config")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-duration"},"testInfo.duration")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-error"},"testInfo.error")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-expected-status"},"testInfo.expectedStatus")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-file"},"testInfo.file")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-fn"},"testInfo.fn")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-line"},"testInfo.line")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-output-dir"},"testInfo.outputDir")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-project"},"testInfo.project")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-repeat-each-index"},"testInfo.repeatEachIndex")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-retry"},"testInfo.retry")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-snapshot-suffix"},"testInfo.snapshotSuffix")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-status"},"testInfo.status")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-stderr"},"testInfo.stderr")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-stdout"},"testInfo.stdout")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-timeout"},"testInfo.timeout")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-title"},"testInfo.title")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo#test-info-worker-index"},"testInfo.workerIndex"))),(0,s.kt)("h2",{id:"test-info-fail"},"testInfo.fail(","[condition, description]",")"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"condition"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-fail-option-condition"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type",title:"Boolean"},"boolean"),">",' Optional condition - the test is marked as "should fail" when the condition is ',(0,s.kt)("inlineCode",{parentName:"li"},"true"),".",(0,s.kt)("a",{href:"#test-info-fail-option-condition",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"description"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-fail-option-description"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Optional description that will be reflected in a test report.",(0,s.kt)("a",{href:"#test-info-fail-option-description",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},"returns:",(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-fail-return"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),">",(0,s.kt)("a",{href:"#test-info-fail-return",class:"list-anchor"},"#"))),(0,s.kt)("p",null,'Marks the currently running test as "should fail". Playwright Test ensures that this test is actually failing. This is similar to ',(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-fail"},"test.fail([condition, description])"),"."),(0,s.kt)("h2",{id:"test-info-fixme"},"testInfo.fixme(","[condition, description]",")"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"condition"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-fixme-option-condition"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type",title:"Boolean"},"boolean"),">",' Optional condition - the test is marked as "fixme" when the condition is ',(0,s.kt)("inlineCode",{parentName:"li"},"true"),".",(0,s.kt)("a",{href:"#test-info-fixme-option-condition",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"description"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-fixme-option-description"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Optional description that will be reflected in a test report.",(0,s.kt)("a",{href:"#test-info-fixme-option-description",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},"returns:",(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-fixme-return"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),">",(0,s.kt)("a",{href:"#test-info-fixme-return",class:"list-anchor"},"#"))),(0,s.kt)("p",null,'Marks the currently running test as "fixme". The test will be skipped, but the intention is to fix it. This is similar to ',(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-fixme"},"test.fixme([condition, description])"),"."),(0,s.kt)("h2",{id:"test-info-output-path"},"testInfo.outputPath(pathSegments)"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"pathSegments"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-output-path-option-path-segments"})," ","<","[string...]",">"," Path segments to append at the end of the resulting path.",(0,s.kt)("a",{href:"#test-info-output-path-option-path-segments",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},"returns:",(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-output-path-return"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">",(0,s.kt)("a",{href:"#test-info-output-path-return",class:"list-anchor"},"#"))),(0,s.kt)("p",null,"Returns a path inside the ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-testinfo#test-info-output-dir"},"testInfo.outputDir")," where the test can safely put a temporary file. Guarantees that tests running in parallel will not interfere with each other."),(0,s.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { test, expect } from '@playwright/test';\nimport fs from 'fs';\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('dir', 'temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the dir/temporary-file.txt', 'utf8');\n});\n"))),(0,s.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { test, expect } = require('@playwright/test');\nconst fs = require('fs');\n\ntest('example test', async ({}, testInfo) => {\n  const file = testInfo.outputPath('dir', 'temporary-file.txt');\n  await fs.promises.writeFile(file, 'Put some data to the dir/temporary-file.txt', 'utf8');\n});\n")))),(0,s.kt)("h2",{id:"test-info-set-timeout"},"testInfo.setTimeout(timeout)"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"timeout"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-set-timeout-option-timeout"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">"," Timeout in milliseconds.",(0,s.kt)("a",{href:"#test-info-set-timeout-option-timeout",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},"returns:",(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-set-timeout-return"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),">",(0,s.kt)("a",{href:"#test-info-set-timeout-return",class:"list-anchor"},"#"))),(0,s.kt)("p",null,"Changes the timeout for the currently running test. Zero means no timeout."),(0,s.kt)("p",null,"Timeout is usually specified in the ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-configuration"},"configuration file"),", but it could be useful to change the timeout in certain scenarios:"),(0,s.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n"))),(0,s.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { test, expect } = require('@playwright/test');\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n")))),(0,s.kt)("h2",{id:"test-info-skip"},"testInfo.skip(","[condition, description]",")"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"condition"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-skip-option-condition"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type",title:"Boolean"},"boolean"),">"," Optional condition - the test is skipped when the condition is ",(0,s.kt)("inlineCode",{parentName:"li"},"true"),".",(0,s.kt)("a",{href:"#test-info-skip-option-condition",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"description"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-skip-option-description"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Optional description that will be reflected in a test report.",(0,s.kt)("a",{href:"#test-info-skip-option-description",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},"returns:",(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-skip-return"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),">",(0,s.kt)("a",{href:"#test-info-skip-return",class:"list-anchor"},"#"))),(0,s.kt)("p",null,"Skips the currently running test. This is similar to ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-skip"},"test.skip(titleOrCondition, testFunctionOrDescription)"),"."),(0,s.kt)("h2",{id:"test-info-slow"},"testInfo.slow(","[condition, description]",")"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"condition"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-slow-option-condition"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type",title:"Boolean"},"boolean"),">",' Optional condition - the test is marked as "slow" when the condition is ',(0,s.kt)("inlineCode",{parentName:"li"},"true"),".",(0,s.kt)("a",{href:"#test-info-slow-option-condition",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"description"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-slow-option-description"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Optional description that will be reflected in a test report.",(0,s.kt)("a",{href:"#test-info-slow-option-description",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},"returns:",(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-slow-return"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),">",(0,s.kt)("a",{href:"#test-info-slow-return",class:"list-anchor"},"#"))),(0,s.kt)("p",null,'Marks the currently running test as "slow", giving it triple the default timeout. This is similar to ',(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-slow"},"test.slow([condition, description])"),"."),(0,s.kt)("h2",{id:"test-info-snapshot-path"},"testInfo.snapshotPath(snapshotName)"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"snapshotName"),(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-snapshot-path-option-snapshot-name"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">",(0,s.kt)("a",{href:"#test-info-snapshot-path-option-snapshot-name",class:"list-anchor"},"#")),(0,s.kt)("li",{parentName:"ul"},"returns:",(0,s.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"test-info-snapshot-path-return"})," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">",(0,s.kt)("a",{href:"#test-info-snapshot-path-return",class:"list-anchor"},"#"))),(0,s.kt)("p",null,"Returns a path to a snapshot file with the given ",(0,s.kt)("inlineCode",{parentName:"p"},"snapshotName"),". Learn more about ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-snapshots"},"snapshots"),"."),(0,s.kt)("h2",{id:"test-info-annotations"},"testInfo.annotations"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",title:"Array"},"Array"),"<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object"},"Object"),">",">",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"type")," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Annotation type, for example ",(0,s.kt)("inlineCode",{parentName:"li"},"'skip'")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"'fail'"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"description")," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Optional description.")))),(0,s.kt)("p",null,"The list of annotations applicable to the current test. Includes annotations from the test, annotations from all ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-describe"},"test.describe(title, callback)")," groups the test belongs to and file-level annotations for the test file."),(0,s.kt)("p",null,"Learn more about ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-annotations"},"test annotations"),"."),(0,s.kt)("h2",{id:"test-info-attachments"},"testInfo.attachments"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",title:"Array"},"Array"),"<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object"},"Object"),">",">",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"name")," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Attachment name."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"contentType")," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Content type of this attachment to properly present in the report, for example ",(0,s.kt)("inlineCode",{parentName:"li"},"'application/json'")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"'image/png'"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"path")," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Optional path on the filesystem to the attached file."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"body")," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://nodejs.org/api/buffer.html#buffer_class_buffer",title:"Buffer"},"Buffer"),">"," Optional attachment body used instead of a file.")))),(0,s.kt)("p",null,"The list of files or buffers attached to the current test. Some reporters show test attachments. For example, you can attach a screenshot to the test."),(0,s.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { test, expect } from '@playwright/test';\n\ntest('basic test', async ({ page }, testInfo) => {\n  await page.goto('https://playwright.dev');\n\n  // Capture a screenshot and attach it.\n  const path = testInfo.outputPath('screenshot.png');\n  await page.screenshot({ path });\n  testInfo.attachments.push({ name: 'screenshot', path, contentType: 'image/png' });\n});\n"))),(0,s.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { test, expect } = require('@playwright/test');\n\ntest('basic test', async ({ page }, testInfo) => {\n  await page.goto('https://playwright.dev');\n\n  // Capture a screenshot and attach it.\n  const path = testInfo.outputPath('screenshot.png');\n  await page.screenshot({ path });\n  testInfo.attachments.push({ name: 'screenshot', path, contentType: 'image/png' });\n});\n")))),(0,s.kt)("h2",{id:"test-info-column"},"testInfo.column"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">")),(0,s.kt)("p",null,"Column number where the currently running test is declared."),(0,s.kt)("h2",{id:"test-info-config"},"testInfo.config"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testconfig",title:"TestConfig"},"TestConfig"),">")),(0,s.kt)("p",null,"Processed configuration from the ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-configuration"},"configuration file"),"."),(0,s.kt)("h2",{id:"test-info-duration"},"testInfo.duration"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">")),(0,s.kt)("p",null,"The number of milliseconds the test took to finish. Always zero before the test finishes, either successfully or not."),(0,s.kt)("h2",{id:"test-info-error"},"testInfo.error"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",title:"Object"},"Object"),">",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"message")," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Error message. Set when ",(0,s.kt)("inlineCode",{parentName:"li"},"Error")," (or its subclass) has been thrown."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"stack")," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," Error stack. Set when ",(0,s.kt)("inlineCode",{parentName:"li"},"Error")," (or its subclass) has been thrown."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"value")," ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),"|",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">"," The thrown value. Set when anything except the ",(0,s.kt)("inlineCode",{parentName:"li"},"Error")," (or its subclass) has been thrown.")))),(0,s.kt)("p",null,"An error thrown during test execution, if any."),(0,s.kt)("h2",{id:"test-info-expected-status"},"testInfo.expectedStatus"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",'"passed"|"failed"|"timedOut"|"skipped"',">")),(0,s.kt)("p",null,"Expected status for the currently running test. This is usually ",(0,s.kt)("inlineCode",{parentName:"p"},"'passed'"),", except for a few cases:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"'skipped'")," for skipped tests, e.g. with ",(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-test#test-skip"},"test.skip(titleOrCondition, testFunctionOrDescription)"),";"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"'failed'")," for tests marked as failed with ",(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-test#test-fail"},"test.fail([condition, description])"),".")),(0,s.kt)("p",null,"Expected status is usually compared with the actual ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-testinfo#test-info-status"},"testInfo.status"),":"),(0,s.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({}, testInfo) => {\n  if (testInfo.status !== testInfo.expectedStatus)\n    console.log(`${testInfo.title} did not run as expected!`);\n});\n"))),(0,s.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { test, expect } = require('@playwright/test');\n\ntest.afterEach(async ({}, testInfo) => {\n  if (testInfo.status !== testInfo.expectedStatus)\n    console.log(`${testInfo.title} did not run as expected!`);\n});\n")))),(0,s.kt)("h2",{id:"test-info-file"},"testInfo.file"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">")),(0,s.kt)("p",null,"Absolute path to a file where the currently running test is declared."),(0,s.kt)("h2",{id:"test-info-fn"},"testInfo.fn"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",title:"Function"},"function"),"(","[TestArgs]",", ",(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testinfo",title:"TestInfo"},"TestInfo"),")",">")),(0,s.kt)("p",null,"Test function as passed to ",(0,s.kt)("inlineCode",{parentName:"p"},"test(title, testFunction)"),"."),(0,s.kt)("h2",{id:"test-info-line"},"testInfo.line"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">")),(0,s.kt)("p",null,"Line number where the currently running test is declared."),(0,s.kt)("h2",{id:"test-info-output-dir"},"testInfo.outputDir"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">")),(0,s.kt)("p",null,"Absolute path to the output directory for this specific test run. Each test run gets its own directory so they cannot conflict."),(0,s.kt)("h2",{id:"test-info-project"},"testInfo.project"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"/docs/api/class-testproject",title:"TestProject"},"TestProject"),">")),(0,s.kt)("p",null,"Processed project configuration from the ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-configuration"},"configuration file"),"."),(0,s.kt)("h2",{id:"test-info-repeat-each-index"},"testInfo.repeatEachIndex"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">")),(0,s.kt)("p",null,'Specifies a unique repeat index when running in "repeat each" mode. This mode is enabled by passing ',(0,s.kt)("inlineCode",{parentName:"p"},"--repeat-each")," to the ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-cli"},"command line"),"."),(0,s.kt)("h2",{id:"test-info-retry"},"testInfo.retry"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">")),(0,s.kt)("p",null,"Specifies the retry number when the test is retried after a failure. The first test run has ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-testinfo#test-info-retry"},"testInfo.retry")," equal to zero, the first retry has it equal to one, and so on. Learn more about ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-retries"},"retries"),"."),(0,s.kt)("h2",{id:"test-info-snapshot-suffix"},"testInfo.snapshotSuffix"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">")),(0,s.kt)("p",null,"Suffix used to differentiate snapshots between multiple test configurations. For example, if snapshots depend on the platform, you can set ",(0,s.kt)("inlineCode",{parentName:"p"},"testInfo.snapshotSuffix")," equal to ",(0,s.kt)("inlineCode",{parentName:"p"},"process.platform"),". In this case ",(0,s.kt)("inlineCode",{parentName:"p"},"expect(value).toMatchSnapshot(snapshotName)")," will use different snapshots depending on the platform. Learn more about ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-snapshots"},"snapshots"),"."),(0,s.kt)("h2",{id:"test-info-status"},"testInfo.status"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",title:"void"},"void"),'|"passed"|"failed"|"timedOut"|"skipped"',">")),(0,s.kt)("p",null,"Actual status for the currently running test. Available after the test has finished in ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-test#test-after-each"},"test.afterEach(hookFunction)")," hook and fixtures."),(0,s.kt)("p",null,"Status is usually compared with the ",(0,s.kt)("a",{parentName:"p",href:"/docs/api/class-testinfo#test-info-expected-status"},"testInfo.expectedStatus"),":"),(0,s.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { test, expect } from '@playwright/test';\n\ntest.afterEach(async ({}, testInfo) => {\n  if (testInfo.status !== testInfo.expectedStatus)\n    console.log(`${testInfo.title} did not run as expected!`);\n});\n"))),(0,s.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { test, expect } = require('@playwright/test');\n\ntest.afterEach(async ({}, testInfo) => {\n  if (testInfo.status !== testInfo.expectedStatus)\n    console.log(`${testInfo.title} did not run as expected!`);\n});\n")))),(0,s.kt)("h2",{id:"test-info-stderr"},"testInfo.stderr"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",title:"Array"},"Array"),"<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),"|",(0,s.kt)("a",{parentName:"li",href:"https://nodejs.org/api/buffer.html#buffer_class_buffer",title:"Buffer"},"Buffer"),">",">")),(0,s.kt)("p",null,"Output written to ",(0,s.kt)("inlineCode",{parentName:"p"},"process.stderr")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"console.error")," during the test execution."),(0,s.kt)("h2",{id:"test-info-stdout"},"testInfo.stdout"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",title:"Array"},"Array"),"<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),"|",(0,s.kt)("a",{parentName:"li",href:"https://nodejs.org/api/buffer.html#buffer_class_buffer",title:"Buffer"},"Buffer"),">",">")),(0,s.kt)("p",null,"Output written to ",(0,s.kt)("inlineCode",{parentName:"p"},"process.stdout")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"console.log")," during the test execution."),(0,s.kt)("h2",{id:"test-info-timeout"},"testInfo.timeout"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">")),(0,s.kt)("p",null,"Timeout in milliseconds for the currently running test. Zero means no timeout. Timeout is usually specified in the ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-configuration"},"configuration file")),(0,s.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { test, expect } from '@playwright/test';\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n"))),(0,s.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { test, expect } = require('@playwright/test');\n\ntest.beforeEach(async ({ page }, testInfo) => {\n  // Extend timeout for all tests running this hook by 30 seconds.\n  testInfo.setTimeout(testInfo.timeout + 30000);\n});\n")))),(0,s.kt)("h2",{id:"test-info-title"},"testInfo.title"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type",title:"string"},"string"),">")),(0,s.kt)("p",null,"The title of the currently running test as passed to ",(0,s.kt)("inlineCode",{parentName:"p"},"test(title, testFunction)"),"."),(0,s.kt)("h2",{id:"test-info-worker-index"},"testInfo.workerIndex"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"type: ","<",(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type",title:"Number"},"number"),">")),(0,s.kt)("p",null,"The unique index of the worker process that is running the test. Also available as ",(0,s.kt)("inlineCode",{parentName:"p"},"process.env.TEST_WORKER_INDEX"),". Learn more about ",(0,s.kt)("a",{parentName:"p",href:"/docs/test-parallel"},"parallelism and sharding")," with Playwright Test."))}d.isMDXComponent=!0},86010:function(t,e,n){function a(t){var e,n,i="";if("string"==typeof t||"number"==typeof t)i+=t;else if("object"==typeof t)if(Array.isArray(t))for(e=0;e<t.length;e++)t[e]&&(n=a(t[e]))&&(i&&(i+=" "),i+=n);else for(e in t)t[e]&&(i&&(i+=" "),i+=e);return i}function i(){for(var t,e,n=0,i="";n<arguments.length;)(t=arguments[n++])&&(e=a(t))&&(i&&(i+=" "),i+=e);return i}n.d(e,{Z:function(){return i}})}}]);