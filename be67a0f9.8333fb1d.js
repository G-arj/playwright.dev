(window.webpackJsonp=window.webpackJsonp||[]).push([[616],{687:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),o=n(7),r=(n(0),n(901)),i=(n(905),n(906),{id:"test-examples",title:"Examples"}),s={unversionedId:"test-examples",id:"test-examples",isDocsHomePage:!1,title:"Examples",description:"- Multiple pages",source:"@site/docs/test-examples.mdx",slug:"/test-examples",permalink:"/docs/next/test-examples",version:"current",sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/next/test-configuration"},next:{title:"Fixtures",permalink:"/docs/next/test-fixtures"}},c=[{value:"Multiple pages",id:"multiple-pages",children:[]},{value:"Mobile emulation",id:"mobile-emulation",children:[]},{value:"Network mocking",id:"network-mocking",children:[]},{value:"Visual comparisons",id:"visual-comparisons",children:[{value:"Page object model",id:"page-object-model",children:[]}]}],l={toc:c};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#multiple-pages"}),"Multiple pages")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#mobile-emulation"}),"Mobile emulation")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#network-mocking"}),"Network mocking")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#visual-comparisons"}),"Visual comparisons"))),Object(r.b)("h2",{id:"multiple-pages"},"Multiple pages"),Object(r.b)("p",null,"The default ",Object(r.b)("inlineCode",{parentName:"p"},"context")," argument is a ","[BrowserContext][browser-context]",". Browser contexts are isolated execution environments that can host multiple pages. See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/next/multi-pages"}),"multi-page scenarios")," for more examples."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { test } from "playwright/test";\n\ntest("tests on multiple web pages", async ({ context }) => {\n  const pageFoo = await context.newPage();\n  const pageBar = await context.newPage();\n  // Test function\n});\n')),Object(r.b)("h2",{id:"mobile-emulation"},"Mobile emulation"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"use")," section in the configuration file can be used to configure mobile emulation in the default ",Object(r.b)("inlineCode",{parentName:"p"},"context"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// config.ts\nimport { PlaywrightTestConfig } from "playwright/test";\nimport { devices } from "playwright";\n\nconst config: PlaywrightTestConfig = {\n  timeout: 30000,\n  projects: [\n    {\n      name: \'chromium\',\n      use: {\n        browserName: \'chromium\',\n        headless: true,\n        ...devices["Pixel 2"],\n      },\n    },\n  ],\n};\nexport default config;\n')),Object(r.b)("h2",{id:"network-mocking"},"Network mocking"),Object(r.b)("p",null,"Define a custom route that mocks network calls for a browser context."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// In foo.spec.ts\nimport { test, expect } from "playwright/test";\n\ntest.beforeEach(async ({ context }) => {\n  // Block any css requests for each test in this file.\n  await context.route(/.css/, route => route.abort());\n});\n\ntest("loads page without css", async ({ page }) => {\n  // Alternatively, block any png requests just for this test.\n  await page.route(/.png/, route => route.abort());\n\n  // Test function code.\n  await page.goto("https://stackoverflow.com");\n});\n')),Object(r.b)("h2",{id:"visual-comparisons"},"Visual comparisons"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"expect")," API supports visual comparisons with ",Object(r.b)("inlineCode",{parentName:"p"},"toMatchSnapshot"),". This uses the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/mapbox/pixelmatch"}),"pixelmatch")," library, and you can pass ",Object(r.b)("inlineCode",{parentName:"p"},"threshold")," as an option."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { test, expect } from "playwright/test";\n\ntest("compares page screenshot", async ({ page }) => {\n  await page.goto("https://stackoverflow.com");\n  const screenshot = await page.screenshot();\n  expect(screenshot).toMatchSnapshot(`test.png`, { threshold: 0.2 });\n});\n')),Object(r.b)("p",null,"On first execution, this will generate golden snapshots. Subsequent runs will compare against the golden snapshots. To update golden snapshots with new actual values, run with the ",Object(r.b)("inlineCode",{parentName:"p"},"--update-snapshots")," flag."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"# Update golden snapshots when they differ from actual\nnpx playwright test --update-snapshots\n")),Object(r.b)("h3",{id:"page-object-model"},"Page object model"),Object(r.b)("p",null,"To introduce a Page Object for a particular page, create a class that will use the ",Object(r.b)("inlineCode",{parentName:"p"},"page")," object."),Object(r.b)("p",null,"Create a ",Object(r.b)("inlineCode",{parentName:"p"},"LoginPage")," helper class to encapsulate common operations on the login page."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// login-page.ts\nimport type { Page } from "playwright";\n\nexport class LoginPage {\n  page: Page;\n\n  constructor(page: Page) {\n    this.page = page;\n  }\n\n  async goto() {\n    await this.page.goto("https://example.com/login");\n  }\n\n  async login() {\n    await this.page.fill("#username", TEST_USERNAME);\n    await this.page.fill("#password", TEST_PASSWORD);\n    await this.page.click("text=Login");\n  }\n}\n')),Object(r.b)("p",null,"Use the ",Object(r.b)("inlineCode",{parentName:"p"},"LoginPage")," class in the tests."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// my.spec.ts\nimport { test, expect } from "playwright/test";\nimport { LoginPage } from "./login-page";\n\ntest(\'login works\', async ({ page }) => {\n  // Create the login page and perform operations.\n  const loginPage = new LoginPage(page);\n  await loginPage.goto();\n  await loginPage.login();\n\n  // Verify it worked.\n  expect(await page.textContent("#user-info")).toBe("Welcome, Test User!");\n});\n')))}p.isMDXComponent=!0},901:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return g}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(i,".").concat(m)]||u[m]||b[m]||r;return n?o.a.createElement(g,s(s({ref:t},l),{},{components:n})):o.a.createElement(g,s({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},902:function(e,t,n){"use strict";function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}},903:function(e,t,n){"use strict";var a=n(0),o=n(904);t.a=function(){var e=Object(a.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},904:function(e,t,n){"use strict";var a=n(0),o=Object(a.createContext)(void 0);t.a=o},905:function(e,t,n){"use strict";n(0),n(903),n(902),n(55)},906:function(e,t,n){"use strict";n(3),n(0)}}]);