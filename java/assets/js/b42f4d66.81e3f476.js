"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[2790],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),u=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return s.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},g=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),g=u(n),d=a,m=g["".concat(l,".").concat(d)]||g[d]||c[d]||r;return n?s.createElement(m,i(i({ref:t},p),{},{components:n})):s.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return a}});var s=n(7294);function a(e){var t=e.children,n=e.hidden,a=e.className;return s.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return p}});var s=n(7462),a=n(7294),r=n(2389),i=n(9366),o=n(6010),l="tabItem_LplD";function u(e){var t,n,r,u=e.lazy,p=e.block,c=e.defaultValue,g=e.values,d=e.groupId,m=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=g?g:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,i.lx)(f,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===c?c:null!=(t=null!=c?c:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=h[0])?void 0:r.props.value;if(null!==w&&!f.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,i.UB)(),y=b.tabGroupChoices,A=b.setTabGroupChoices,P=(0,a.useState)(w),k=P[0],R=P[1],I=[],j=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var x=y[d];null!=x&&x!==k&&f.some((function(e){return e.value===x}))&&R(x)}var q=function(e){var t=e.currentTarget,n=I.indexOf(t),s=f[n].value;s!==k&&(j(t),R(s),null!=d&&A(d,s))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var s=I.indexOf(e.currentTarget)+1;n=I[s]||I[0];break;case"ArrowLeft":var a=I.indexOf(e.currentTarget)-1;n=I[a]||I[I.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},m)},f.map((function(e){var t=e.value,n=e.label,r=e.attributes;return a.createElement("li",(0,s.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:function(e){return I.push(e)},onKeyDown:O,onFocus:q,onClick:q},r,{className:(0,o.Z)("tabs__item",l,null==r?void 0:r.className,{"tabs__item--active":k===t})}),null!=n?n:t)}))),u?(0,a.cloneElement)(h.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==k})}))))}function p(e){var t=(0,r.Z)();return a.createElement(u,(0,s.Z)({key:String(t)},e))}},3077:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var s=n(7462),a=n(3366),r=(n(7294),n(3905)),i=(n(9877),n(8215),["components"]),o={id:"api-testing",title:"API testing"},l=void 0,u={unversionedId:"api-testing",id:"api-testing",title:"API testing",description:"Playwright can be used to get access to the REST API of your application.",source:"@site/docs/api-testing.mdx",sourceDirName:".",slug:"/api-testing",permalink:"/java/docs/next/api-testing",tags:[],version:"current",frontMatter:{id:"api-testing",title:"API testing"},sidebar:"docs",previous:{title:"Auto-waiting",permalink:"/java/docs/next/actionability"},next:{title:"Authentication",permalink:"/java/docs/next/auth"}},p={},c=[{value:"Writing API Test",id:"writing-api-test",level:2},{value:"Configure",id:"configure",level:3},{value:"Write tests",id:"write-tests",level:3},{value:"Setup and teardown",id:"setup-and-teardown",level:3},{value:"Complete test example",id:"complete-test-example",level:3},{value:"Prepare server state via API calls",id:"prepare-server-state-via-api-calls",level:2},{value:"Check the server state after running user actions",id:"check-the-server-state-after-running-user-actions",level:2},{value:"Reuse authentication state",id:"reuse-authentication-state",level:2}],g={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,s.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Playwright can be used to get access to the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Representational_state_transfer"},"REST")," API of your application."),(0,r.kt)("p",null,"Sometimes you may want to send requests to the server directly from Node.js without loading a page and running js code in it. A few examples where it may come in handy:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Test your server API."),(0,r.kt)("li",{parentName:"ul"},"Prepare server side state before visiting the web application in a test."),(0,r.kt)("li",{parentName:"ul"},"Validate server side post-conditions after running some actions in the browser.")),(0,r.kt)("p",null,"All of that could be achieved via ",(0,r.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-apirequestcontext",title:"APIRequestContext"},"APIRequestContext")," methods."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#writing-api-test"},"Writing API Test")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#prepare-server-state-via-api-calls"},"Prepare server state via API calls")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#check-the-server-state-after-running-user-actions"},"Check the server state after running user actions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#reuse-authentication-state"},"Reuse authentication state"))),(0,r.kt)("h2",{id:"writing-api-test"},"Writing API Test"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-apirequestcontext",title:"APIRequestContext"},"APIRequestContext")," can send all kinds of HTTP(S) requests over network."),(0,r.kt)("p",null,"The following example demonstrates how to use Playwright to test issues creation via ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest"},"GitHub API"),". The test suite will do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a new repository before running tests."),(0,r.kt)("li",{parentName:"ul"},"Create a few issues and validate server state."),(0,r.kt)("li",{parentName:"ul"},"Delete the repository after running tests.")),(0,r.kt)("h3",{id:"configure"},"Configure"),(0,r.kt)("p",null,"GitHub API requires authorization, so we'll configure the token once for all tests. While at it, we'll also set the ",(0,r.kt)("inlineCode",{parentName:"p"},"baseURL")," to simplify the tests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package org.example;\n\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.Playwright;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.TestInstance;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  void createPlaywright() {\n    playwright = Playwright.create();\n  }\n\n  void createAPIRequestContext() {\n    Map<String, String> headers = new HashMap<>();\n    // We set this header per GitHub guidelines.\n    headers.put("Accept", "application/vnd.github.v3+json");\n    // Add authorization token to all requests.\n    // Assuming personal access token available in the environment.\n    headers.put("Authorization", "token " + API_TOKEN);\n\n    request = playwright.request().newContext(new APIRequest.NewContextOptions()\n      // All requests we send go to this API endpoint.\n      .setBaseURL("https://api.github.com")\n      .setExtraHTTPHeaders(headers));\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n  }\n\n  void disposeAPIRequestContext() {\n    if (request != null) {\n      request.dispose();\n      request = null;\n    }\n  }\n\n  void closePlaywright() {\n    if (playwright != null) {\n      playwright.close();\n      playwright = null;\n    }\n  }\n\n  @AfterAll\n  void afterAll() {\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n}\n')),(0,r.kt)("h3",{id:"write-tests"},"Write tests"),(0,r.kt)("p",null,"Now that we initialized request object we can add a few tests that will create new issues in the repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package org.example;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.APIResponse;\nimport com.microsoft.playwright.Playwright;\nimport com.microsoft.playwright.options.RequestOptions;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String REPO = "test-repo-2";\n  private static final String USER = System.getenv("GITHUB_USER");\n  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  // ...\n\n  @Test\n  void shouldCreateBugReport() {\n    Map<String, String> data = new HashMap<>();\n    data.put("title", "[Bug] report 1");\n    data.put("body", "Bug description");\n    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has("title")) {\n        continue;\n      }\n      if ("[Bug] report 1".equals(itemObj.get("title").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals("Bug description", issue.get("body").getAsString(), issue.toString());\n  }\n\n  @Test\n  void shouldCreateFeatureRequest() {\n    Map<String, String> data = new HashMap<>();\n    data.put("title", "[Feature] request 1");\n    data.put("body", "Feature description");\n    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has("title")) {\n        continue;\n      }\n      if ("[Feature] request 1".equals(itemObj.get("title").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals("Feature description", issue.get("body").getAsString(), issue.toString());\n  }\n}\n\n')),(0,r.kt)("h3",{id:"setup-and-teardown"},"Setup and teardown"),(0,r.kt)("p",null,"These tests assume that repository exists. You probably want to create a new one before running tests and delete it afterwards. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"@BeforeAll")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@AfterAll")," hooks for that."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'  // ...\n\n  void createTestRepository() {\n    APIResponse newRepo = request.post("/user/repos",\n      RequestOptions.create().setData(Collections.singletonMap("name", REPO)));\n    assertTrue(newRepo.ok(), newRepo.text());\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n    createTestRepository();\n  }\n\n  void deleteTestRepository() {\n    if (request != null) {\n      APIResponse deletedRepo = request.delete("/repos/" + USER + "/" + REPO);\n      assertTrue(deletedRepo.ok());\n    }\n  }\n  // ...\n\n  @AfterAll\n  void afterAll() {\n    deleteTestRepository();\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n')),(0,r.kt)("h3",{id:"complete-test-example"},"Complete test example"),(0,r.kt)("p",null,"Here is the complete example of an API test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package org.example;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.microsoft.playwright.APIRequest;\nimport com.microsoft.playwright.APIRequestContext;\nimport com.microsoft.playwright.APIResponse;\nimport com.microsoft.playwright.Playwright;\nimport com.microsoft.playwright.options.RequestOptions;\nimport org.junit.jupiter.api.*;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class TestGitHubAPI {\n  private static final String REPO = "test-repo-2";\n  private static final String USER = System.getenv("GITHUB_USER");\n  private static final String API_TOKEN = System.getenv("GITHUB_API_TOKEN");\n\n  private Playwright playwright;\n  private APIRequestContext request;\n\n  void createPlaywright() {\n    playwright = Playwright.create();\n  }\n\n  void createAPIRequestContext() {\n    Map<String, String> headers = new HashMap<>();\n    // We set this header per GitHub guidelines.\n    headers.put("Accept", "application/vnd.github.v3+json");\n    // Add authorization token to all requests.\n    // Assuming personal access token available in the environment.\n    headers.put("Authorization", "token " + API_TOKEN);\n\n    request = playwright.request().newContext(new APIRequest.NewContextOptions()\n      // All requests we send go to this API endpoint.\n      .setBaseURL("https://api.github.com")\n      .setExtraHTTPHeaders(headers));\n  }\n\n  void createTestRepository() {\n    APIResponse newRepo = request.post("/user/repos",\n      RequestOptions.create().setData(Collections.singletonMap("name", REPO)));\n    assertTrue(newRepo.ok(), newRepo.text());\n  }\n\n  @BeforeAll\n  void beforeAll() {\n    createPlaywright();\n    createAPIRequestContext();\n    createTestRepository();\n  }\n\n  void deleteTestRepository() {\n    if (request != null) {\n      APIResponse deletedRepo = request.delete("/repos/" + USER + "/" + REPO);\n      assertTrue(deletedRepo.ok());\n    }\n  }\n\n  void disposeAPIRequestContext() {\n    if (request != null) {\n      request.dispose();\n      request = null;\n    }\n  }\n\n  void closePlaywright() {\n    if (playwright != null) {\n      playwright.close();\n      playwright = null;\n    }\n  }\n\n  @AfterAll\n  void afterAll() {\n    deleteTestRepository();\n    disposeAPIRequestContext();\n    closePlaywright();\n  }\n\n  @Test\n  void shouldCreateBugReport() {\n    Map<String, String> data = new HashMap<>();\n    data.put("title", "[Bug] report 1");\n    data.put("body", "Bug description");\n    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has("title")) {\n        continue;\n      }\n      if ("[Bug] report 1".equals(itemObj.get("title").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals("Bug description", issue.get("body").getAsString(), issue.toString());\n  }\n\n  @Test\n  void shouldCreateFeatureRequest() {\n    Map<String, String> data = new HashMap<>();\n    data.put("title", "[Feature] request 1");\n    data.put("body", "Feature description");\n    APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n      RequestOptions.create().setData(data));\n    assertTrue(newIssue.ok());\n\n    APIResponse issues = request.get("/repos/" + USER + "/" + REPO + "/issues");\n    assertTrue(issues.ok());\n    JsonArray json = new Gson().fromJson(issues.text(), JsonArray.class);\n    JsonObject issue = null;\n    for (JsonElement item : json) {\n      JsonObject itemObj = item.getAsJsonObject();\n      if (!itemObj.has("title")) {\n        continue;\n      }\n      if ("[Feature] request 1".equals(itemObj.get("title").getAsString())) {\n        issue = itemObj;\n        break;\n      }\n    }\n    assertNotNull(issue);\n    assertEquals("Feature description", issue.get("body").getAsString(), issue.toString());\n  }\n}\n')),(0,r.kt)("h2",{id:"prepare-server-state-via-api-calls"},"Prepare server state via API calls"),(0,r.kt)("p",null,"The following test creates a new issue via API and then navigates to the list of all issues in the project to check that it appears at the top of the list. The check is performed using ",(0,r.kt)("a",{parentName:"p",href:"/java/docs/next/test-assertions",title:"LocatorAssertions"},"LocatorAssertions"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Test\nvoid lastCreatedIssueShouldBeFirstInTheList() {\n  Map<String, String> data = new HashMap<>();\n  data.put("title", "[Feature] request 1");\n  data.put("body", "Feature description");\n  APIResponse newIssue = request.post("/repos/" + USER + "/" + REPO + "/issues",\n    RequestOptions.create().setData(data));\n  assertTrue(newIssue.ok());\n\n  page.navigate("https://github.com/" + USER + "/" + REPO + "/issues");\n  Locator firstIssue = page.locator("a[data-hovercard-type=\'issue\']").first();\n  assertThat(firstIssue).hasText("[Feature] request 1");\n}\n')),(0,r.kt)("h2",{id:"check-the-server-state-after-running-user-actions"},"Check the server state after running user actions"),(0,r.kt)("p",null,"The following test creates a new issue via user interface in the browser and then checks via API if it was created:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Test\nvoid lastCreatedIssueShouldBeOnTheServer() {\n  page.navigate("https://github.com/" + USER + "/" + REPO + "/issues");\n  page.click("text=New Issue");\n  page.fill("[aria-label=\'Title\']", "Bug report 1");\n  page.fill("[aria-label=\'Comment body\']", "Bug description");\n  page.click("text=Submit new issue");\n  String issueId = page.url().substring(page.url().lastIndexOf(\'/\'));\n\n  APIResponse newIssue = request.get("https://github.com/" + USER + "/" + REPO + "/issues/" + issueId);\n  assertThat(newIssue).isOK();\n  assertTrue(newIssue.text().contains("Bug report 1"));\n}\n')),(0,r.kt)("h2",{id:"reuse-authentication-state"},"Reuse authentication state"),(0,r.kt)("p",null,"Web apps use cookie-based or token-based authentication, where authenticated state is stored as ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"},"cookies"),". Playwright provides ",(0,r.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-apirequestcontext#api-request-context-storage-state"},"APIRequestContext.storageState([options])")," method that can be used to retrieve storage state from an authenticated context and then create new contexts with that state."),(0,r.kt)("p",null,"Storage state is interchangeable between ",(0,r.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-browsercontext",title:"BrowserContext"},"BrowserContext")," and ",(0,r.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-apirequestcontext",title:"APIRequestContext"},"APIRequestContext"),". You can use it to log in via API calls and then create a new context with cookies already there. The following code snippet retrieves state from an authenticated ",(0,r.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-apirequestcontext",title:"APIRequestContext"},"APIRequestContext")," and creates a new ",(0,r.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-browsercontext",title:"BrowserContext"},"BrowserContext")," with that state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'APIRequestContext requestContext = playwright.request().newContext(\n  new APIRequest.NewContextOptions().setHttpCredentials("user", "passwd"));\nrequestContext.get("https://api.example.com/login");\n// Save storage state into a variable.\nString state = requestContext.storageState();\n\n// Create a new context with the saved storage state.\nBrowserContext context = browser.newContext(new Browser.NewContextOptions().setStorageState(state));\n')))}d.isMDXComponent=!0}}]);