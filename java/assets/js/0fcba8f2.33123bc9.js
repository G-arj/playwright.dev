"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[4666],{16782:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return h},default:function(){return g}});var s=a(87462),i=a(63366),n=(a(67294),a(3905)),r=(a(26396),a(58215),["components"]),o={id:"class-pageassertions",title:"PageAssertions"},l=void 0,p={unversionedId:"api/class-pageassertions",id:"api/class-pageassertions",isDocsHomePage:!1,title:"PageAssertions",description:"The PageAssertions] class provides assertion methods that can be used to make assertions about the [Page] state in the tests. A new instance of [PageAssertions] is created by calling [assertThat(page):",source:"@site/docs/api/class-pageassertions.mdx",sourceDirName:"api",slug:"/api/class-pageassertions",permalink:"/java/docs/next/api/class-pageassertions",tags:[],version:"current",frontMatter:{id:"class-pageassertions",title:"PageAssertions"},sidebar:"api",previous:{title:"Page",permalink:"/java/docs/next/api/class-page"},next:{title:"PlaywrightAssertions",permalink:"/java/docs/next/api/class-playwrightassertions"}},h=[{value:"assertThat(page).hasTitle(titleOrRegExp, options)",id:"page-assertions-to-have-title",children:[],level:2},{value:"assertThat(page).hasURL(urlOrRegExp, options)",id:"page-assertions-to-have-url",children:[],level:2},{value:"assertThat(page).not()",id:"page-assertions-not",children:[],level:2}],c={toc:h};function g(e){var t=e.components,a=(0,i.Z)(e,r);return(0,n.kt)("wrapper",(0,s.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-pageassertions",title:"PageAssertions"},"PageAssertions")," class provides assertion methods that can be used to make assertions about the ",(0,n.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-page",title:"Page"},"Page")," state in the tests. A new instance of ",(0,n.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-pageassertions",title:"PageAssertions"},"PageAssertions")," is created by calling ",(0,n.kt)("a",{parentName:"p",href:"/java/docs/next/api/class-playwrightassertions#playwright-assertions-expect-page"},"assertThat(page)"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'...\nimport static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\npublic class TestPage {\n  ...\n  @Test\n  void navigatesToLoginPage() {\n    ...\n    page.click("#login");\n    assertThat(page).hasURL(Pattern.compile(".*/login"));\n  }\n}\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/java/docs/next/api/class-pageassertions#page-assertions-to-have-title"},"assertThat(page).hasTitle(titleOrRegExp[, options])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/java/docs/next/api/class-pageassertions#page-assertions-to-have-url"},"assertThat(page).hasURL(urlOrRegExp[, options])")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/java/docs/next/api/class-pageassertions#page-assertions-not"},"assertThat(page).not()"))),(0,n.kt)("h2",{id:"page-assertions-to-have-title"},"assertThat(page).hasTitle(titleOrRegExp","[, options]",")"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"titleOrRegExp"),(0,n.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-title-option-title-or-reg-exp"})," ","<",(0,n.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",title:"String"},"String"),"|",(0,n.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html",title:"Pattern"},"Pattern"),">"," Expected title or RegExp.",(0,n.kt)("a",{href:"#page-assertions-to-have-title-option-title-or-reg-exp",class:"list-anchor"},"#")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options")," ","<",(0,n.kt)("inlineCode",{parentName:"li"},"PageAssertions.HasTitleOptions"),">",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"setTimeout"),(0,n.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-title-option-timeout"})," ","<",(0,n.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html",title:"double"},"double"),">"," Time to retry the assertion for.",(0,n.kt)("a",{href:"#page-assertions-to-have-title-option-timeout",class:"list-anchor"},"#")))),(0,n.kt)("li",{parentName:"ul"},"returns:",(0,n.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-title-return"})," ","<",(0,n.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html",title:"void"},"void"),">",(0,n.kt)("a",{href:"#page-assertions-to-have-title-return",class:"list-anchor"},"#"))),(0,n.kt)("p",null,"Ensures the page has the given title."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'assertThat(page).hasTitle("Playwright");\n')),(0,n.kt)("h2",{id:"page-assertions-to-have-url"},"assertThat(page).hasURL(urlOrRegExp","[, options]",")"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"urlOrRegExp"),(0,n.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-url-option-url-or-reg-exp"})," ","<",(0,n.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",title:"String"},"String"),"|",(0,n.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html",title:"Pattern"},"Pattern"),">"," Expected substring or RegExp.",(0,n.kt)("a",{href:"#page-assertions-to-have-url-option-url-or-reg-exp",class:"list-anchor"},"#")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"options")," ","<",(0,n.kt)("inlineCode",{parentName:"li"},"PageAssertions.HasURLOptions"),">",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"setTimeout"),(0,n.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-url-option-timeout"})," ","<",(0,n.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html",title:"double"},"double"),">"," Time to retry the assertion for.",(0,n.kt)("a",{href:"#page-assertions-to-have-url-option-timeout",class:"list-anchor"},"#")))),(0,n.kt)("li",{parentName:"ul"},"returns:",(0,n.kt)("a",{"aria-hidden":"true",tabindex:"-1",class:"list-anchor-link",id:"page-assertions-to-have-url-return"})," ","<",(0,n.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/tutorial/java/javaOO/methods.html",title:"void"},"void"),">",(0,n.kt)("a",{href:"#page-assertions-to-have-url-return",class:"list-anchor"},"#"))),(0,n.kt)("p",null,"Ensures the page is navigated to the given URL."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'assertThat(page).hasURL(".com");\n')),(0,n.kt)("h2",{id:"page-assertions-not"},"assertThat(page).not()"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"returns: ","<",(0,n.kt)("a",{parentName:"li",href:"/java/docs/next/api/class-pageassertions",title:"PageAssertions"},"PageAssertions"),">")),(0,n.kt)("p",null,"Makes the assertion check for the opposite condition. For example, this code tests that the page URL doesn't contain ",(0,n.kt)("inlineCode",{parentName:"p"},'"error"'),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'assertThat(page).not().hasURL("error");\n')))}g.isMDXComponent=!0}}]);